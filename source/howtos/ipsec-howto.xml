<?xml version="1.0" encoding="UTF-8"?>
<article id="ipsec-howto" lang="tr">
  <articleinfo>
    <title>IPsec NASIL</title>
    <author role="translator">
      <firstname>Necdet Yücel</firstname>
      <affiliation>
        <address><email>nyucel@comu.edu.tr</email></address>
      </affiliation>
    </author>
    <author>
	    <firstname>Ralf</firstname>
	    <surname>Spenneberg</surname>
       <affiliation>
	       <address><email>maintainer@ipsec-howto.org</email></address>
       </affiliation>
     </author>
    <revhistory>
      <para><emphasis role="bold">Bu çevirinin sürüm bilgileri:</emphasis></para>
      <revision>
        <revnumber>1.0</revnumber>
        <date>Ekim 2008</date>
        <authorinitials>ny</authorinitials>
        <revremark>İlk Çeviri</revremark>
      </revision>
    </revhistory>
    <revhistory>
      <para><emphasis role="bold">Özgün belgenin sürüm bilgileri:</emphasis></para>
      <revision>
	      <revnumber>0.9.96</revnumber>
          <date>2007-02-26</date>
          <authorinitials>RS</authorinitials>
	  <revremark>OpenSSL needs file: crlnumber</revremark>
       </revision></revhistory>
<copyright><year>2003-2007</year><holder>Ralf Spenneberg - Özgün belge</holder></copyright><sbr/>
<copyright><year>2008</year><holder>Necdet Yücel - Türkçe çeviri</holder></copyright>
    <legalnotice><title>Yasal Açıklamalar</title>
<para>Bu belgenin, <emphasis>IPsec NASIL</emphasis> çevirisinin 1.0 sürümünün <emphasis role="bold">telif hakkı © 2008 <emphasis>Necdet Yücel</emphasis>'e</emphasis>, özgün İngilizce sürümünün  <emphasis role="bold">telif hakkı © 2003-2007 <emphasis>Ralf Spenneberg</emphasis>'e</emphasis> aittir. Bu belgeyi, Free Software Foundation tarafından yayınlanmış bulunan <link linkend="gpl">GNU Genel Kamu Lisansının</link> 3 ya da daha sonraki sürümünün koşullarına bağlı kalarak kopyalayabilir, dağıtabilir ve/veya değiştirebilirsiniz. Bu Lisansın bir kopyasını <ulink url="http://www.gnu.org/licenses/gpl.html"/> adresinde bulabilirsiniz.</para>
  <para>BU BELGE "ÜCRETSİZ" OLARAK RUHSATLANDIĞI İÇİN, İÇERDİĞİ BİLGİLER İÇİN İLGİLİ KANUNLARIN İZİN VERDİĞİ ÖLÇÜDE HERHANGİ BİR GARANTİ VERİLMEMEKTEDİR. AKSİ YAZILI OLARAK BELİRTİLMEDİĞİ MÜDDETÇE TELİF HAKKI SAHİPLERİ VE/VEYA BAŞKA ŞAHISLAR BELGEYİ "OLDUĞU GİBİ", AŞİKAR VEYA ZIMNEN, SATILABİLİRLİĞİ VEYA HERHANGİ BİR AMACA UYGUNLUĞU DA DAHİL OLMAK ÜZERE HİÇBİR GARANTİ VERMEKSİZİN DAĞITMAKTADIRLAR. BİLGİNİN KALİTESİ İLE İLGİLİ TÜM SORUNLAR SİZE AİTTİR. HERHANGİ BİR HATALI BİLGİDEN DOLAYI DOĞABİLECEK OLAN BÜTÜN SERVİS, TAMİR VEYA DÜZELTME MASRAFLARI SİZE AİTTİR.
  </para>
  <para>İLGİLİ KANUNUN İCBAR ETTİĞİ DURUMLAR VEYA YAZILI ANLAŞMA HARİCİNDE HERHANGİ BİR ŞEKİLDE TELİF HAKKI SAHİBİ VEYA YUKARIDA İZİN VERİLDİĞİ ŞEKİLDE BELGEYİ DEĞİŞTİREN VEYA YENİDEN DAĞITAN HERHANGİ BİR KİŞİ, BİLGİNİN KULLANIMI VEYA KULLANILAMAMASI (VEYA VERİ KAYBI OLUŞMASI, VERİNİN YANLIŞ HALE GELMESİ, SİZİN VEYA ÜÇÜNCÜ ŞAHISLARIN ZARARA UĞRAMASI VEYA BİLGİLERİN BAŞKA BİLGİLERLE UYUMSUZ OLMASI) YÜZÜNDEN OLUŞAN GENEL, ÖZEL, DOĞRUDAN YA DA DOLAYLI HERHANGİ BİR ZARARDAN, BÖYLE BİR TAZMİNAT TALEBİ TELİF HAKKI SAHİBİ VEYA İLGİLİ KİŞİYE BİLDİRİLMİŞ OLSA DAHİ, SORUMLU DEĞİLDİR.
  </para>
  <para>Tüm telif hakları aksi özellikle belirtilmediği sürece sahibine aittir. Belge içinde geçen herhangi bir terim, bir ticari isim ya da kuruma itibar kazandırma olarak algılanmamalıdır. Bir ürün ya da markanın kullanılmış olması ona onay verildiği anlamında görülmemelidir.</para>
    </legalnotice>
     <abstract>
	<para>Bu belge Linux 2.6 çekirdeği üzerinde IPsec kullanarak VPN oluşturmanın temel ve ileri konularını kapsayacaktır. 2.4 çekirdeğiyle ilgili çok fazla belge olduğundan burada sadece 2.6 çekirdeği ile gelen yeni IPsec özellikleri üzerinde durulacaktır.</para>
	<para>Bu belgenin İngilizce sürümünü <ulink url="http://www.ipsec-howto.org/t1.html"> bu adreste</ulink> bulabilirsiniz.</para>
     </abstract>
  </articleinfo>
<sect1 id="ipsec-howto-intro"><title>Giriş</title>
	<para></para>
	<sect2 id="ipsec-howto-intro-reason"><title>Bu Belgenin Yazılma Nedeni</title>
		<para>Geçmişte bir çok NASIL belgesi kullandım. Çoğu benim için faydalı oldu. Linux çekirdeğinde IPsec'in yeni özelliklerinin gerçeklenimleri yapıldıkça ben de onlarla ilgilenmeye başladım. Bu konuyla ilgili çok az sayıda belge bulunduğundan bu NASIL belgesini yazmaya başladım.</para>
	</sect2>
	<sect2 id="ipsec-howto-intro-contrib"><title>Katkıda Bulunanlar</title>
	<para><itemizedlist>
		<listitem>Matija Nalis</listitem>
		<listitem>Fridtjof Busse</listitem>
		<listitem>Uwe Beck</listitem>
		<listitem>Juanjo Ciarlante</listitem>
		<listitem>Ervin Hegedus</listitem>
		<listitem>Barabara Kane</listitem>
		<listitem>Alois Schmid</listitem>
	</itemizedlist>
	</para>
	</sect2>
	
	<sect2 id="ipsec-howto-intro-docs"><title>İlgili Belgeler</title>
	<para><itemizedlist>
		<listitem><ulink url="http://www.tldp.org/HOWTO/Networking-Overview-HOWTO.html">Networking Overview HOWTO</ulink></listitem>
		<listitem><ulink url="http://www.tldp.org/HOWTO/Net-HOWTO/index.html">Networking HOWTO</ulink></listitem>
		<listitem><ulink url="http://www.tldp.org/HOWTO/Net-HOWTO/index.html">VPN-Masquerade HOWTO</ulink></listitem>
		<listitem><ulink url="http://www.tldp.org/HOWTO/VPN-HOWTO/">VPN HOWTO</ulink></listitem>
		<listitem><ulink url="http://www.tldp.org/HOWTO/VPN-HOWTO/">Advanced Routing &amp; Traffic Control HOWTO</ulink></listitem>
	</itemizedlist></para>
	</sect2>
</sect1>
<sect1 id="ipsec-howto-theory"><title>Teorik Bilgiler</title>
	<sect2 id="ipsec-howto-theory-whatis"><title>IPsec Nedir?</title>
		<para>IPsec IP protokolünün IP ve daha üst katmanlar için güvenlik sağlayan bir genişletmesidir. İlk olarak yeni IPv6 standadı için geliştirilmiş daha sonra IPv4 için "geriye yapılandırılmıştır". IPsec mimarisi RFC2401 belgesinde tanımlanmıştır. Aşağıdaki bir kaç paragraf IPsec icin kısa bir giriş olacaktır.</para>
		<para>IPsec iletişimin doğruluğunu kanıtlamak, bütünlük ve gizliliğinden emin olmak için iki farklı protokol kullanır: AH ve ESP. Tüm IP datagramını koruyabileceği gibi sadece daha üst katmanların protokollerini de koruyabilir. Bu durumlar için karşılık gelen modlar tünel ve taşıma modlarıdır. Tünel modunda IP datagramı IPsec protokolünü kullanarak yeni bir IP datagramı tarafından tamamen kapsüllenir. Taşıma modunda ise IP datagramının sadece kullanıcı verisi (payload) IPsec protokolü tarafından IPsec başlığı IP başlığı ile daha üst katman protokol başlığı arasına yerleştirilerek işlenir. (<xref linkend="ipsec-howto-mods"/>'e bakınız.)</para>
		<para><figure id="ipsec-howto-mods"><title>IPsec Tünel ve Trasport Modları</title>
			<mediaobject><imageobject>
				<imagedata fileref="ipsec/mods.png" format="PNG" align="center" scalefit="1"/>
			</imageobject></mediaobject></figure>
		</para>
		<para>IPsec protokolleri IP datagramlarının bütünlüğünü korumak için hash mesaj doğrulama kodlarını (HMAC) kullanır. MD5 ve SHA gibi hash algoritmaları kullanarak IP datagramı ve bir gizli anahtarı temel alan HMAC'i çıkartırlar. Daha sonra bu HMAC IPsec protokol başlığına eklenir ve paketin alıcısı eğer gizli anahtara erişimi varsa bu HMAC'i kontrol edebilir.</para>
		<para>IPsec protokolleri IP datagramlarının gizliliğini korumak için standat simetik şifreleme algoritmalarını kullanır. IPsec standartı NULL ve DES gerçeklenimlerine ihtiyaç duysa da günümüzde genel olarak 3DES, AES ve Blowfish gibi daha güçlü algoritmalar kullanılmaktadır.</para>
		<para>IPsec protokolleri DoS ataklarına karşı korunmak için kayan pencere kullanırlar. Her paketin ardışık bir numarası vardır ve bir paket sadece numarasının pencerede olması veya daha yeni olması durumunda kabul edilir. Eski paketler hızla gözardı edilirler. Böylece saldırganın orjinal paketleri kaydedip daha sonra yanıtlamasıyla yapılan cevaplama saldırılarına karşı koruma sağlanmış olur.</para>
		<para>IPsec paketlerini karşılıklı olarak kapsülleyip açabilen eşlerin gizli anahtarı, algoritmaları ve iletişimde izin verilen IP adreslerini saklamak için bir yönteme ihtiyaçları vardır. IP datagramlarının korunması için ihtiyaç duyulan bütün bu parametreler bir güvenlik anlaşmasında (security association) (SA) saklanır. Güvenlik anlaşmaları sırayla güvenlik anlaşmaları veritabanında (SAD) saklanırlar.</para>
		<para>Her bir güvenlik anlaşması aşağıdaki parametreleri tanımlar:
			<itemizedlist><listitem>Oluşan IPsec başlığının hedef ve kaynak IP adresleri. Bu adresler paketleri koruyan IPsec eşlerinin IP adresleridir.</listitem>
				<listitem>IPsec protokolü (AH veya ESP), bazen sıkıştırma (IPCOMP) da desteklenir.</listitem>
				<listitem>IPsec protokolünün kullandığı gizli anahtar ve protokol.</listitem>
				<listitem>Güvenlik Parametre Dizini (Security Parameter Index - SPI). Bu güvenlik anlaşmasını belirleyen 32-bit bir sayıdır.</listitem>
			</itemizedlist>
		</para>
		<para>Bazı güvenlik anlaşması veritabanı gerçeklenimleri başka parametrelerin de saklanmasına izin verir:
			<itemizedlist><listitem>IPsec modu (tünel veya taşıma)</listitem>
				<listitem>Cevap ataklarına karşı koruma sağlayan kayan pencerenin büyüklüğü.</listitem>
				<listitem>Güvenlik anlaşmasının geçerlilik süresi.</listitem>
			</itemizedlist>
		</para>
		<para>Güvenlik anlaşması kaynak ve hedef IP adreslerini tanımladığından çift yönlü IPsec iletişiminde sadece bir yöndeki trafikte koruma sağlayabilir. IPsec her iki yönde de koruma sağlamak için iki adet tek yönlü güvenlik anlaşmasına ihtiyaç duyar.</para>
		<para>Güvenlik anlaşmaları sadece IPsec'in trafiği nasıl koruyacağını belirlerler. Hangi trafiğin ne zaman korunacağını tanımlamak için ilave bilgiye ihtiyaç duyulur. Bu bilgi günelik anlaşması veritabanında bulundurulan güvenlik politikasında (SP) saklanır.</para>
		<para>Bir güvenlik politikası aşağıdaki parametreleri belirler:
			<itemizedlist><listitem>Korunacak paketlerin kaynak ve hedef adresleri. Taşıma modunda bu adresler SA'daki adreslerle aynı olurlar! Tünel modunda farklı olabilirler!</listitem>
				<listitem>Korunacak protokol (ve port). Bazı IPsec gerçeklenimleri özel protokolün korunmak için tanımlanmasın aizin vermezler. Böyle bir durumda belirtilen IP adresleri arasındaki tüm trafik korunur.</listitem>
				<listitem>Paketlerin korunmasında kullanılacak güvenlik anlaşması.</listitem>
			</itemizedlist>
		</para>
		<para>Güvenlik anlaşmasının elle yapılandırılması hataya yatkın ve çok gğvenli de değildir. Gizli anahtarların ve şifreleme algoritmalarının sanal özel ağdaki tüm eşler arasında faylaşılması gerekir. Özellikle anahtarların değişimi sistem yöneticisi için kritik problemler yaratır: Henüz bir şifreleme sağlanmamışken simetrik anahtarların değişimi nasıl yapılacaktır?</para>
		<para>Bu problemin çözümü için internet anahtar değişim protokolü (IKE) geliştirilmiştir. Bu protokol ilk olarak eşlerin kimlik denetimini yapar, ardından güvenlik anlaşmaları tertip edilir ve simetrik anahtarlar Diffie Hellmann anahtar değişimi kullanılarak seçilir. IKE protokolü gizli anahtarların güvenliğinden emin olmak için periyodik olarak yapılacak anahtar yenilemelerinde de devreye girer.</para>
	</sect2>	
	<sect2 id="ipsec-howto-theory-protocols"><title>IPsec Protokolleri</title>
		<para>IPsec protokol ailesi iki bağımsız IP protokolünden oluşur: Kimlik Kanıtlama Başlığı (AH) ve Kapsüllenen Güvenlik Yükü (ESP). AH 51 ve ESP ise 50 numaralı protokollerdir (ayrıntı için <filename>/etc/protocols</filename> dosyasına bakabilirsiniz). Aşağıdaki iki bölümde bu protokollerin özelliklerini özet olarak bulacaksınız.</para>
		<sect3 id="ipsec-howto-theory-protocols-ah"><title>AH - Kimlik Kanıtlama Başlığı</title>
			<para>AH protokolü IP datagramının bütünlüğünü korur. Bunu yapabilmek için datagramın HMAC'ini hesaplar. HMAC hesaplanırken gizli anahtar, paketteki kullanıcı verisi ve IP başlığındaki IP adresi gibi değişmeyen bölümleri temel alınır. Bu bilgi daha sonra paketin AH başlığına eklenir. AH başlığı <xref linkend="ipsec-howto-ah_header"/>'de gösterilmektedir.</para>
			<para><figure id="ipsec-howto-ah_header"><title>Paketin bütünlüğünü koruyan AH Başlığı</title>
					<mediaobject><imageobject>
							<imagedata fileref="ipsec/ah_header.png" format="PNG" align="center" scalefit="1"/>
			</imageobject></mediaobject></figure></para>
			<para>AH başlığı 24 byte uzunluğundadır. İlk byte <emphasis>Next Header</emphasis> alanıdır. Bu alan takip eden başlığın protokolünü belirtir. Tünel modunda bütüm IP datagramı kapsüllendiğinden bu alanın değeri 4'tür. Bir TCP datagramı taşıma modunda kapsüllendiğinde kullanılan sayı ise 6'dır. Sonraki byte yükün uzunluğunu gösterir. Bu alanı iki adet ayırılmış byte takip eder. Sıradaki 32 bit uzunluğundaki alanda <emphasis>Güvenlik Parametre Dizini</emphasis> (SPI) bulunur. SPI, kapsüllenmiş paketin açılmasında kullanılacak güvenlik anlaşmasını belirler. 32 bit uzunluğundaki <emphasis>Ardışıklık Numarası</emphasis> cevaplama ataklarına karşı koruma sağlar. Son alan olan <emphasis>HMAC</emphasis> ise 96 bitlik alan kaplar. Sadece gizli anahtarı bilen eşler HMAC yaratıp onu kontrol edebildiklerinden HMAC alanı paketin bütünlüğünü korur.</para>
			<para>AH protokolü IP datagramının IP başlığındaki IP adresi gibi değişmeyen parçalarını da koruduğundan NAT'a izin vermez. Ağ Adresi Çeviricisi (NAT) IP başlığındaki IP adresini (genellikle kaynak IP) başka bir IP adresiyle değiştirir. Böylece HMAC değişeceğinden artık geçersiz olur. IPsec protokolünün bir genişletmesi olan Aykırı-NAT bu kısıtlamanın etrafından dolanan bir çözümdür.</para>
		</sect3>		
		<sect3 id="ipsec-howto-theory-protocols-esp"><title>ESP - Kapsüllenen Güvenlik Yükü</title>
			<para>ESP protokolü hem HMAC kullanarak paketin bütünlüğünü hem de şifreleme kullanarak paketin gizliğini garanti eder. Paketin şifrelendikten sonra HMAC hesaplanır ve ESP başlığı oluşturulur ve pakete eklenir. İki bölümden oluşan ESP başlığı <xref linkend="ipsec-howto-esp_header"/>'de gösterilmiştir.</para>
			<para><figure id="ipsec-howto-esp_header"><title>ESP Başlığı</title>
					<mediaobject><imageobject>
							<imagedata fileref="ipsec/esp_header.png" format="PNG" scalefit="1"/>
			</imageobject></mediaobject></figure></para>
			<para>ESP başlığındaki ilk bölüm <emphasis>Güvenlik Parametre Dizini</emphasis> (SPI)'dir. SPI kapsüllenmiş ESP paketinin açılmasında kullanılacak SA'yı belirtir. İkinci bölüm <emphasis>Ardışıklık Numarası</emphasis>dır. Bu numara cevaplama ataklarına karşı koruma sağlar. Üçüncü bölümde ise şifreleme işleminde kullanılan <emphasis>İlklendirme Vektörü</emphasis> (IV) bulunur. Simetrik şifreleme algoritmaları eğer IV kullanılmazsa frekans saldırılarına karşı zayıftırlar. IV sayasinde iki eşit yüke karşılık iki farklı şifrelenmiş yük oluştuğundundan emin olunabilir.</para>
			<para>IPsec şifreleme sürecinde blok şifreleme algoritmaları kullandığından eğer şifrelenecek yükün uzunluğu bir bloğun tam katı değilse takviye edilmelidir. Bu takviyenin uzunluğu da başlığa eklenir. Bunun ardından <emphasis>Next Header</emphasis> bölümü gelir. ESP başlığında son olarak  paketin bütünlüğünden emin olunmasını sağlayan 96 bit uzunluğundaki HMAC bulunur. IP başlığı hesaplama sürecine dahil edilmez.</para>
			<para>Bu yüzden ESP protokolü NAT kullanımına mani olmaz. Yine de bir çok durumda IPsec ile NAT'ın beraber kullanımı mümkün olmamaktadır. Aykırı-NAT ESP paketlerini UDP paketlerinin içine kapsülleyen bir çözüm sunar.</para>
		</sect3>
	</sect2>
	<sect2 id="ipsec-howto-theory-ike"><title>IKE Protokolü</title>
		<para>IKE protokolü güvenli iletişimin en ünlü sorununu çözer: eşlerin kimlik kanıtlama yapması ve simetrik anahtarların değişimi. Bu sayede güvenlik anlaşmaları yapılır ve SAD oluşturulur. IKE protokolü genellikle kullanıcı tarafı sürecine ihtiyaç duyar, işletim sisteminde bir gerçekleştirmesi yoktur. İletişim için 500/UDP portunu kullanır.</para>
		<para>IKE protokol fonksiyonları iki safhalıdır. İlk safhada <emphasis>Internet Güvenlik Anlaşması Anahtar Yönetimi Güvenlik Anlaşması</emphasis> (ISAKMP SA) tesis edilir. İkinci safhada ISAKMP SA kullanılarak IPsec SA'ları kurulur.</para>
		<para>İlk safhada eşlerin kimlik kanıtlaması RSA anahtarları veya X.509 sertifikaları (hatta Kerberos desteğindeki racoon) gibi daha önceden paylaşılan anahtarlara dayanarak yapılır.</para>
		<para>İlk safha genellikle iki farklı modu destekler: temel mod ve saldırgan mod. İki mod da eşlerin kimlik kanıtlamasını yapar ve bir ISAKMP SA oluşturur ama saldırgan mod bu işi yapmak için temel modun yarısı kadar mesaj kullanır. Bunun sakıncası saldırgan modun kimlik korumasını desteklemediğinden eğer önceden paylaşılmış anahtarlarla birlikte kullanılırsa aradaki-adam saldırılarına karşı korunmasız oluşudur. Diğer yandan bu saldırgan modun tek amacıdır. Temel mod, iç işleyişleri yüzünden bilinmeyen eşler için önceden paylaşılmış farklı anahtarların kullanımını desteklemez. Saldırgan mod kimlik korumasını desteklemez ve istemcinin kimliğini açık olarak gönderir. Bu nedenle eşler birbirini kimlik kanıtlaması gerçekleşmeden bilirler ve farklı eşler için önceden paylaşılmış farklı anahtarlar kullanılabilir.</para>
		<para>İkinci safhada IKE protokolü güvenlik anlaşma tekliflerini karşılıklı değiştirir ve ISAKMP SA sayesinde sonuca bağlar. ISAKMP SA'nın sunduğu kimlik denetimi aradaki-adam ataklarına karşı koruma sağlar. İkinci safha hızlı modu kullanır.</para>
		<para>Genellikle iki eş sadece bir ISAKMP SA üzerinde anlaşırlar ve bu kullanılarak bir çok (en azından iki adet) tek yönlü IPsec SA'ları kurulur.</para>
	</sect2>
	<sect2 id="ipsec-howto-theory-nat"><title>Aykırı NAT</title>
		<para>Aykırı NAT nedir ve neden ihtiyaç duyulur?</para>
		<para>Sıklıkla VPN'deki taraflardan biri bir NAT aygıtının arkasında bulunur. Burada sadece Kaynak-NAT cihazlarını göz önüne alacağız. Bundan sonra NAT ile Kaynak-NAT veya Maskelemeyi kastediyor olacağım. Peki bunun VPN ile nesaıl bir ilgisi var? En başta taraflardan birinin orjinal IP adresi NAT aygıtı tarafından gizlenir. NAT cihazı orjinal kaynak IP adresini kendi IP adresiyle değiştirir.</para>
		<para>Böylece IPsec AH protokolü kullanılamaz hale gelir. Ama iki taraf da doru yapılandırılırsa ESP hala kullanılabilir.</para>
		<para>Öyleyse neden Aykırı-NAT'a ihtiyaç duyulsun? Çünkü aynı NAT aygıtının arkasındaki iki makinenin dışarıya bir tünel oluşturmaya çalışmalarıyla birlikte ikisi birden çalışmaz hale gelir.</para>
		<para>Neden böyle olur? NAT aygıtı gönderdiği paketlere gelen yanıtları doğru istemcilere gönderebilmek için nat'ladığı bağlantıların kaydını tutmak zorundadır. Bu yüzden NAT aygıtında bir tablo bulunur ve nat'lanan tüm bağlantılar bu tabloya yazılır. Şimdi bir istemcinin internet üzerinden bir web sunucusuna bağladığını varsayalım. NAT cihazı istemcinin adresi yerine kendi adresini kaynak adres olarak gösterir ve tablosuna seçilen istemci protundan gelen tüm paketleri orjinal istemci1'e göndermesi gerektiği notunu alır. İkinci bir istemci iletişime başlar başlamaz aynı eşdeğer bağlantıyı kurar. Şayet ikinci istemci de tesadüfen aynı istemci portunu seçerse, NAT aygıtı bir belirsizlik olmaması için istemci portunu da değiştirecektir. Bu işlem TCP ve UDP kullanımında problem çıkartmayacaktır çünkü her ikisi de portlarla çalışmaktadır. Ama ESP port kullanmaz. Bu yüzden NAT aygıtı paketleri ayırt etmek için sadece protokolü kullanabilir. İlk istemci bağlandığında tabloya tüm ESP paketlerinin ilk istemciye "geriye-natlanması" gerektiği yazılır. İkinci istemci bağladığında bu girdinin üzerine ikinci istemciye uygun bilgiler yazılır ve böylece en azından ilk istemcinin bağlantısı kesilir.</para>
		<para>Bu duruma yardımcı olmak için Aykırı-NAT ne sunar? Aykırı-NAT benzer şekilde ESP paketlerini UDP paketlerine kapsüller. Bu bir NAT aygıtı tarafından kolayca yapılabilir çünkü portlarla çalışabilirler. Öntanımlı olarak 4500/udp portu kullanılır. Aykırı-NAT için bir çok taslak bulunmasına rağmen henüz bir RFC yoktur. Aykırı-NAT'ın güzel bir özelliği bir kez aktif hale getirildiğinde tarafların ihtiyaç duyduklarında onu otomatik olarak kullanabilmeleridir.</para>
	</sect2>
</sect1>

<sect1 id="ipsec-howto-openswan"><title>Linux 2.6 Üzerinde Çalışan Openswan</title>
	<para>Bu bölüm daha sonra yazılacak.</para>
</sect1>

<sect1 id="ipsec-howto-kametools"><title>KAME-tools kullanan Linux 2.6 Çekirdeği</title>
	<para>Bu bölümde Linux çekirdeğinin ≥2.5.47 ve 2.6.* serilerinde doğal IPsec yığınının (stack) nasıl kullanılacağı açıklanacaktır. Bu IPsec yığınının kurulumu ve yapıladırması FreeS/WAN'dan oldukça farklıdır ve FreeBSD, NetBSD ve OpenBSD gibi *BSD türevlerine benzer.</para>
	<para>İlk olarak Linux çekirdeğinin ve kullanıcı araçlarının kurulum ve yapılandırmalarından bahsedeceğim.  Daha sonra taşıma ve tünel modlarında elle yapılandırılan bağlantıların ayarlanmasını anlatacağım. Son olarak, önceden paylaşılmış anahtarlar ve X.509 sertifikalrı kullanan otomatik anahtarlamalı bağlantıların kurulmasının üzerinden geçeceğiz. Roadwarriors için destekle bu bölüm sonlanacak.</para>
	<sect2 id="ipsec-howto-kametools-installation"><title>Kurulum</title>
		<para>Kurulum için kullanacağınız Linux çekirdeği en azından 2.5.47 veya 2.6.* olmalıdır. Çekirdeğin kaynak kodlarını <ulink url="http://www.kernel.org"/> adresinden indirebilirsiniz. İndirdikten sonta açıp, yapılandırıp derlemeniz gerekecektir.<screen>cd /usr/local/src
tar xvjf /path-to-source/linux-&lt;version&gt;.tar.bz2
cd linux-&lt;version&gt;
make xconfig
make bzImage
make modules
make modules_install
make install</screen>
		</para>
		<para>Bunlar Linux çekirdeğinin yapılandırılıp derlenmesinde en sık kullanılan çekirdek parametreleridir. Eğer özel bir kuruluma ihtiyacınız varsa Çekirdek NASIL belgesinden yararlanabilirsiniz.</para>
		<para>Çekirdeği yapılandırırken aşağıdaki özellikleri aktif hale getirmek önemldir:<screen>Networking support (NET) [Y/n/?] y
*
* Networking options
*
PF_KEY sockets (NET_KEY) [Y/n/m/?] y
IP: AH transformation (INET_AH) [Y/n/m/?] y
IP: ESP transformation (INET_ESP) [Y/n/m/?] y
IP: IPsec user configuration interface (XFRM_USER) [Y/n/m/?] y

Cryptographic API (CRYPTO) [Y/n/?] y
HMAC support (CRYPTO_HMAC) [Y/n/?] y
Null algorithms (CRYPTO_NULL) [Y/n/m/?] y
MD5 digest algorithm (CRYPTO_MD5) [Y/n/m/?] y
SHA1 digest algorithm (CRYPTO_SHA1) [Y/n/m/?] y
DES and Triple DES EDE cipher algorithms (CRYPTO_DES) [Y/n/m/?] y
AES cipher algorithms (CRYPTO_AES) [Y/n/m/?] y</screen>
		</para>
		<para>Kullandığınız çekirdeğin sürümüne bağlı olarak IPv6 desteğini de açmanız gerekebilir.</para>
		<para>Çekirdek derlenip kuruduktan sonra kullanıcı araçlarının kurulumuna geçilebilir. Bu araçları <ulink url="http://ipsec-tools.sourceforge.net/"/> adresinden indirebilirsiniz. Paketi elle derlerken çekirdek başlıklarının (kernel headers) nerede olduğunu belirtmeniz gerekebilir. Çekirdek başlıklarının en azından 2.5.47 sürümüne ait olması gereklidir.<warning>Eğer çekirdek sürümünüz &gt;= 2.6.10 ise kullanacağınız ipsec-tools da &gt;= 0.5 olmak zorundadır, çünkü bu çekirdeğe daha eski ipsec-tools sürümlerindeki racoon için tanımlı olmayan yeni yönlendirme politikaları eklenmiştir. Bazı Linux dağıtımlarının eski çekirdekler kullansalar bile çokça yama yapıyor olabileceklerini hesaba katın. Bunun için çekirdeğinizdeki yönlendirme politikalarına bakmanız yeterli olacaktır.</warning>
		<screen>./configure --with-kernel-headers=/lib/modules/2.6.X/build/include
make
make install</screen></para>
		<para>Artık devam etmek için herşey hazır olmalıdır.</para>
	</sect2>
	<sect2 id="ipsec-howto-kametools-setkey"><title><command>setkey</command> kullanan elle anahtarlanmış bağlantılar</title>
		<para>Elle anahtarlanmış bağlantı derken bağlantının kurulumu için gerekli tüm parametrelerin bir yönetici tarafından atandığı bağlantıları kastediyorum. IKE protokolü tarafların kimlik kanıtlamasını otomatik olarak yapmaz ve gerekli parametreleri belirlemez. Güvenlik anlaşmasının tesisinde hangi protokolün, algoritmanın ve anahtarın kullanacağına ve uygun şekilde güvenlik anlaşması veritabanına (SAD) yazılacağına yönetici karar verir.</para>
		<sect3 id="ipsec-howto-kametools-setkey-transport"><title>Taşıma Modu</title>
		<para>Bu bölümde önce taşıma modunda nasıl elle anahtarlanmış bağlantının kurulacağını göreceğiz. Bu başlangıç için en iyi yöntemdir çünkü kurulabilecek en basit bağlantı budur. Örnek olarak 192.168.1.100 ve 192.168.2.100 adreslerine sahip iki bilgisayarın IPsec ile haberleştiğini varsayacağız.</para>
		<para>SAD ve SPD'de bulunan bütün parametreler <command>setkey</command> komutuyla değiştirilebilir. Bu komutun kılavuz belgesi oldukça açıklayıcı olduğundan burada sadece taşıma modunda bir bağlantı kurulması için ihtiyaç duyulan parametreler açıklanacaktır. <command>setkey</command> eğer <command>setkey -f /etc/setkey.conf</command> şeklinde kullanılırsa istediğiniz bir yapılandırma dosyasını kullanabilir. Uygun bir <filename>/etc/setkey.conf</filename> dosyası aşağıda verilmiştir.<screen>#!/usr/sbin/setkey -f

# Configuration for 192.168.1.100

# Flush the SAD and SPD
flush;
spdflush;

# Attention: Use this keys only for testing purposes!
# Generate your own keys!

# AH SAs using 128 bit long keys
add 192.168.1.100 192.168.2.100 ah 0x200 -A hmac-md5 
0xc0291ff014dccdd03874d9e8e4cdf3e6;
add 192.168.2.100 192.168.1.100 ah 0x300 -A hmac-md5 
0x96358c90783bbfa3d7b196ceabe0536b;

# ESP SAs using 192 bit long keys (168 + 24 parity)
add 192.168.1.100 192.168.2.100 esp 0x201 -E 3des-cbc 
0x7aeaca3f87d060a12f4a4487d5a5c3355920fae69a96c831;
add 192.168.2.100 192.168.1.100 esp 0x301 -E 3des-cbc 
0xf6ddb555acfd9d77b03ea3843f2653255afe8eb5573965df;

# Security policies
spdadd 192.168.1.100 192.168.2.100 any -P out ipsec
esp/transport//require
ah/transport//require;

spdadd 192.168.2.100 192.168.1.100 any -P in ipsec
esp/transport//require
ah/transport//require;</screen></para>
		<para>Elle anahtarlanan bağlantınızı test amacı dışında herhangi bir iş için kullanacaksanız yukarıdaki betikteki anahtarları değiştirmeniz gerekir. Kendi anahtarlarınızı aşağıdaki komutla yaratabilirsiniz:	
		<screen>$ # 128 Bit long key
$ dd if=/dev/random count=16 bs=1| xxd -ps
16+0 Records ein
16+0 Records aus
cd0456eff95c5529ea9e918043e19cbe

$ # 192 Bit long key
$ dd if=/dev/random count=24 bs=1| xxd -ps
24+0 Records ein
24+0 Records aus
9d6c4a8275ab12fbfdcaf01f0ba9dcfb5f424c878e97f888</screen></para>
	<para>Anahtarlarınızı yaratırken lütfen gerçekten rasgele anahtar ürettiğinden emin olabileceğiniz <filename>/dev/random</filename> aygıtını kullanın.</para>
	<para>Betik ilk olarak güvenlik anlaşması veritabanını (SAD) ve güvenlik politikası veritabanını (SPD) temizler. Daha sonra AH SA ve ESP SA'ları oluşturur. Bir güvenlik anlaşması SAD'a <command>add</command> komutu ile eklenir. Bu komut parametre olarak kaynak ve hedef IP adreslerine, IPsec protokolüne (<command>ah</command>), SPI (<command>0x200</command>) ve algoritma bilgilerine ihtiyaç duyar. Kimlik denetleme algoritması <command>-A</command> ile belirtilir (şifreleme için <command>-E</command>, sıkıştırma için <command>-C</command> kullanılır, henüz IP sıkıştırması desteklenmemektedir). Algoritma içinde anahtar mutlaka belirtilmelidir. Anahtar çift tırnak içinde “ASCII” veya <command>0x</command>'i takip eden heksadesimal biçimde yazılabilir.</para>
	<para>Linux AH ve ESP için şu algoritmaları destekler: hmac-md5 and hmac-sha, des-cbc ve 3des-cbc. Kısa bir zaman sonra şu algoritmalar da muhtemelen desteklenecektir: basit (şifrelemesiz), blowfish-cbc, aes-cbc, hmac-sha2-256 ve hmac-sha2-512.</para>
	<para>SPD'ye güvenlik politikaları <command>spdadd</command> komutu ile eklenir. Hangi paketlerin IPsec ile korunacağı ve hangi protokol ve anahtarların kullanılacağını bu politikalar belirler. Bu komut da parametre olarak korunacak paketlerin kaynak ve hedef IP adresine, korunacak (herhangi bir) protokole (ve porta) ve kullanılacak politikaya (<command>-P</command>) ihtiyaç duyar. Politika yönü (içeri/dışarı), uygulanacak işlemi (ipsec/discard/none), protokolü (ah/esp/ipcomp), modu (transport) ve seviyeyi (use/require) belirler.</para>
	<para>Bu yapılandırma dosyası IPsec iletişiminde yer alacak her iki tarafta da oluşturulmalıdır. Yukarıdaki dosya 192.168.1.100 adresli tarafta hiç bir değişikliğe ihtiyaç duymadan çalışırken 192.168.2.100 adresine sahip tarafta paketlerinin yönünün değiştiğini göstermek üzere hafifçe değiştirilmelidir. Bunun en kolay yolu güvenlik politikalarındaki yönleri değiştirmektir: <command>-P in</command> ile <command>-P out</command>'nin yerlerini değiştirmektir. Aşağıda örnek bir dosya var:<screen>#!/usr/sbin/setkey -f

# Configuration for 192.168.2.100

# Flush the SAD and SPD
flush;
spdflush;

# Attention: Use this keys only for testing purposes!
# Generate your own keys!

# AH SAs using 128 bit long keys
add 192.168.1.100 192.168.2.100 ah 0x200 -A hmac-md5 
0xc0291ff014dccdd03874d9e8e4cdf3e6;
add 192.168.2.100 192.168.1.100 ah 0x300 -A hmac-md5 
0x96358c90783bbfa3d7b196ceabe0536b;

# ESP SAs using 192 bit long keys (168 + 24 parity)
add 192.168.1.100 192.168.2.100 esp 0x201 -E 3des-cbc 
0x7aeaca3f87d060a12f4a4487d5a5c3355920fae69a96c831;
add 192.168.2.100 192.168.1.100 esp 0x301 -E 3des-cbc 
0xf6ddb555acfd9d77b03ea3843f2653255afe8eb5573965df;

# Security policies
spdadd 192.168.1.100 192.168.2.100 any -P in ipsec
esp/transport//require
ah/transport//require;

spdadd 192.168.2.100 192.168.1.100 any -P out ipsec
esp/transport//require
ah/transport//require;</screen></para>

<para>Yapılandırma dosyası taraflardaki yerini aldığında <command>setkey -f /etc/setkey.conf</command> komutuyla yüklenebilir. Yüklemenin başarılı olup olmadığı SAD ve SPD görüntülenerek test edilebilir:<screen># setkey -D
# setkey -DP</screen></para>
<para>Kurulum <xref linkend="ipsec-howto-transportt"/>'te gösterilmektedir.</para>
<para><figure id="ipsec-howto-transportt"><title>Taşıma modunda AH ve ESP kullanan iki bilgisayar</title>
		<mediaobject><imageobject>
				<imagedata fileref="ipsec/transport.png" format="PNG" align="center" scalefit="1"/>
			</imageobject></mediaobject></figure>
		</para>	
		<para>Taraflardan birinden diğerini pinglediğinizde trafik şifrelenecek ve tcpdump aşağıdaki paketleri gösterecektir:<screen>12:45:39.373005 192.168.1.100 > 192.168.2.100: AH(spi=0x00000200,seq=0x1): 
ESP(spi=0x00000201,seq=0x1) (DF)
12:45:39.448636 192.168.2.100 > 192.168.1.100: AH(spi=0x00000300,seq=0x1): 
ESP(spi=0x00000301,seq=0x1)
12:45:40.542430 192.168.1.100 > 192.168.2.100: AH(spi=0x00000200,seq=0x2): 
ESP(spi=0x00000201,seq=0x2) (DF)
12:45:40.569414 192.168.2.100 > 192.168.1.100: AH(spi=0x00000300,seq=0x2): 
ESP(spi=0x00000301,seq=0x2)</screen></para>
		</sect3>
		<sect3 id="ipsec-howto-kametools-setkey-tunnel"><title>Tünel Modu</title>
		<para>Tünel modu her iki taraf da ağ geçidi olarak çalıştığında ve iki ağ arasındaki trafiği koruduğunda kullanılır (<xref linkend="ipsec-howto-tunel"/>). Orjinal IP paketleri bir ağ geçidinden diğerine gönderilirken şifrelenir ve kapsüllenir. Karşı taraf ise paketin kapsülünü açar ve orjinal korumasız paketin geçişine izin verir.</para>
		<para><figure id="ipsec-howto-tunel"><title>İki ağ arasındaki trafiği koruyan iki bilgisayar</title>
					<mediaobject><imageobject>
							<imagedata fileref="ipsec/tunnel.png" format="PNG" align="center" scalefit="1"/>
					</imageobject></mediaobject></figure>
		</para>
		<para>Güvenlik anlaşmalarının ve politikaların yapılandırması taşıma moduna çok benzer. Aşağıda bir örneği bulunmaktadır:<screen>#!/usr/sbin/setkey -f

# Flush the SAD and SPD
flush;
spdflush;

# ESP SAs doing encryption using 192 bit long keys (168 + 24 parity)
# and authentication using 128 bit long keys
add 192.168.1.100 192.168.2.100 esp 0x201 -m tunnel -E 3des-cbc 
0x7aeaca3f87d060a12f4a4487d5a5c3355920fae69a96c831 
-A hmac-md5 0xc0291ff014dccdd03874d9e8e4cdf3e6;

add 192.168.2.100 192.168.1.100 esp 0x301 -m tunnel -E 3des-cbc 
0xf6ddb555acfd9d77b03ea3843f2653255afe8eb5573965df 
-A hmac-md5 0x96358c90783bbfa3d7b196ceabe0536b;

# Security policies
spdadd 172.16.1.0/24 172.16.2.0/24 any -P out ipsec
esp/tunnel/192.168.1.100-192.168.2.100/require;

spdadd 172.16.2.0/24 172.16.1.0/24 any -P in ipsec
esp/tunnel/192.168.2.100-192.168.1.100/require;</screen>
<warning>Kullandığınız Linux çekirdeği 2.6.10 veya daha üstü ise ve paketlerin bilgisayardan dışarı yönlendirilmesi gerekiyorsa ayrıca yönlendirme politikasını da belirtmeniz gerekir. Eğer ipsec-tools'un 0.5 sürümünü kullanırsanız bu politika otomatik olarak yüklenir aksi halde eski araçları kullanarak kendiniz eklemeniz gerekir. <command>setkey</command> komutunu Çekirdek modunda (<command>-k</command>) çalıştırıyprsanız yönlendirme politikasını da elle eklemeniz gerekir.</warning>
<screen>spdadd 172.16.2.0/24 172.16.1.0/24 any -P fwd ipsec
esp/tunnel/192.168.2.100-192.168.1.100/require;</screen>
	</para>
	<para>Bu örnekte sadece ESP protokolü kullanılmıştır. ESP protokolü bütünlüğü ve gizliliği garanti eder. Bu durumda ESP algoritmalarının sırası önemlidir. İlk olarak şifreleme algoritmasını ve anahtarını, ardından ise kimlik kanıtlama algoritmasını ve anahtarını tanımlamanız gereklidir.</para>
	<para>Tünelin iki tarafına da bu dosyayı kopyalamanız ve politikaların yönünü (<command>in</command> yerine <command>out</command>) değiştirmeniz gerekir. Yönlendirme politikanız da varsa IP adreslerinin yönlerini de ters çevirmeniz gerekir.</para>
	<para>BSD IPsec gerleştirimine benzemeyen bir şekilde Linux'daki bir güvenlik anlaşması tünel ve taşıma mıdlarından sadece biri için kullanılabilir. Taşıma modu öntanımlı mod olduğundan tünel moduna ihtiyaç duyulduğunda güvenlik anlaşması <command>-m tunnel</command> ile tanımlanmalıdır.</para>
	<para>Artık güvenlik politikaları korunacak ağların IP adreslerini göstermektedir. Bu adreslerini kaynak ve hedef olarak kullanacak paketler IPsec tarafından korunacaktır. Tünel modu kullanıldığında güvenlik politikası güvenliği gerçekleştirecek tarafların IP adreslerini ve tüneli belirtmelidir. Bu bilgileruygun IPsecSA'yı bulmak için gereklidir.</para>
	<para>Tüneliniz çalışmadığında yönlendirmenizi kontrol etmelisiniz. İstemcileriniz diğer ağa gönderecekleri paketleri vpn ağ geçidine göndermeleri gerektiğini bilmelidir. Bunun en kolay çözümü vpn ağ geçidini öntanımlı ağ geçidi yapmaktır.</para>
		</sect3>		
	</sect2>
	<sect2 id="ipsec-howto-kametools-racoon"><title>racoon kullanan otomatik anahtarlamalı bağlantılar</title>
	<para>KAME IKE altalan süreci <command>racoon</command> Linux'a da uyarlanmıştır. Bu süreç otomatik anahtarlamalı IPsec bağlantıları kurabilmektedir. Racoon kimlik denetiminde önceden paylaşılan anahtarların, X.509 sertifikaların ve Kerberos'un kullanımını desteklemektedir. Temel, saldırgan ve asıl modlarda kullanılabilir. Bu bölümde <command>racoon</command> yapılandırması önceden paylaşılan anahtar ve X.509 sertifikasıyla nasıl yapıldığı gösterilecektir (Kerberos ile ilgili bölümü yazmayı planlıyorum). Bölüm sonunda bir roadwarrior yapılandırma senaryosu özet olarak verilecektir. <note><para>Eğer Linux 2.6.10 (ya da dağıtımınız tarafından yamalanmış 2.6.9 çekirdeği kullanıyorsanız ipsec-tools'un 0.5 sürümüne ihtiyacınız vardır.</para></note></para>
		<sect3 id="ipsec-howto-kametools-racoon-keys"><title>Önceden paylaşılmış anahtarlar</title>
			<para><command>racoon</command> kullanarak kimlik denetimi yapmanın en kolay yolu önceden paylaşılmış anahtarları kullanmaktır. Bu anahtarlar <filename>/etc/psk.txt</filename> dosyasında belirtilmelidir. Yetkisi olmayan kullanıcıların okuyamamaları gereken bu dosya (<command>chmod 400 /etc/psk.txt</command> aşağıdakine benzer olmalıdır:<screen># IPv4 Adresi
192.168.2.100          simple psk
5.0.0.1                0xe10bd52b0529b54aac97db63462850f3
# USER_FQDN
ralf@spenneberg.net    This is a psk for an email address
# FQDN
www.spenneberg.net     This is a psk</screen>
		</para>
		<para>Bu dosya sütunlar halinde organize edilmiştir. İlk sütun önceden paylaşılan anahtar (PSK) ile kimlik knaıtlaması yapılmış olan tarafın kimliğini barındırır. İkinci sütündaki herşey PSK'dır.</para>
		<para><command>racoon</command> yapılandırması dosyadan kolaylıkla anlaşılabilir. Aşağıdaki sıradan bir <command>racoon</command> yapılandırma dosyası <filename>/etc/racoon.conf</filename> bulacaksınız:<screen>path pre_shared_key "/etc/psk.txt";

remote 192.168.2.100 {
	exchange_mode main;
	proposal {
		encryption_algorithm 3des;
		hash_algorithm md5;
		authentication_method pre_shared_key;
		dh_group modp1024;
		}
}

sainfo address 172.16.1.0/24 any address 172.16.2.0/24 any {
	pfs_group modp768;
	encryption_algorithm 3des;
	authentication_algorithm hmac_md5;
	compression_algorithm deflate;
}</screen></para>
	<para>Yapılandırma dosyasında ilk olarak <command>racoon</command>'un önceden paylaşılmış anahtarları nerede bulacağı belirtilir. Daha sonra 192.168.2.100 adresli tarafı ve IKE görüşmesinde kullanılacak parametreleri belirtmek gereklidir. İkinci paragraf ise güvenlik anlaşmasının oluşturulmasında kullanılabilecek parametreleri barındırır. Bu parametreler belirli bir IP adresine özel olabileceği gibi anonim adresler için de olabilir. Bu parametreler arsında SA için kullnaılacak şifreleme, kimlik kanıtlama ve sıkıştırma algoritmaları da bulunur. Bu üç algoritmanın tanımlanması <command>racoon</command>'un hatasız başlayabilmesi için gereklidir.</para>
	<para><command>racoon</command>'un çalıştırıldığında hemen tünel görüşmelerine başlamaz. Bunun yerine bir tünele ihtiyaç duyulana kadar bekler. Bu bilgiyi verebilmesi için çekirdeğin <command>racoon</command>'u nasıl bilgilendireceğini bilmesi gerekir. Bunun için sistem yöneticisi güvenlik anlaşması olmadan güvenlik politikalarını tanımlamalıdır. Linux çekirdeği ne zaman bir paketi güvenlik politikası gereği korumak durumunda kalır ve uygun güvenlik anlaşması bulamazsa, ihtiyaç duyduğu güvenlik anlaşması için <command>racoon</command>'u çağırır. <command>Racoon</command> IKE görüşmelerini başlatır ve sonuçta SA'ları oluşturur. Artık Linux çekirdeği paketleri göndermeye hazırdır.</para>
	<para>Varsayılan kurulum için 192.168.1.100 üzerinde aşağıdaki politikalara ihtiyaç vardır: <screen>#!/usr/sbin/setkey -f
#
# Flush SAD and SPD
flush;
spdflush;

# Create policies for racoon
spdadd 172.16.1.0/24 172.16.2.0/24 any -P out ipsec
esp/tunnel/192.168.1.100-192.168.2.100/require;

spdadd 172.16.2.0/24 172.16.1.0/24 any -P in ipsec
esp/tunnel/192.168.2.100-192.168.1.100/require;</screen></para>
	<para>Politikalar <command>setkey -f /etc/setkey.conf</command> komutuyla yüklendikten sonra <command>racoon</command> başlatılabilir. <command>racoon</command> deneme amacıyla kullanılacaksa <command>racoon -F -f /etc/racoon.conf</command> ile başlatılmalıdır. Diğer tarafın yapılandırması ters yönleri gösterecek şekilde yeniden düzenlenmelidir. <filename>/etc/psk.txt</filename>, <filename>/etc/setkey.conf</filename> ve <filename>/etc/racoon.conf</filename> dosyalarındaki IP adresleri değiştirilmelidir.</para>
	<para>Tünelin kurulduğu aşağıdaki gibi günlüklerden (log) takip edilebilir:
		
		<screen>2003-02-21 18:11:17: INFO: main.c:170:main(): @(#)racoon 20001216 20001216
 sakane@kame.net
2003-02-21 18:11:17: INFO: main.c:171:main(): @(#)This product linked Open
SSL 0.9.6b [engine] 9 Jul 2001 (http://www.openssl.org/)
2003-02-21 18:11:17: INFO: isakmp.c:1365:isakmp_open(): 127.0.0.1[500] use
 d as isakmp port (fd=7)
2003-02-21 18:11:17: INFO: isakmp.c:1365:isakmp_open(): 192.168.1.100[500]
 used as isakmp port (fd=9)
2003-02-21 18:11:37: INFO: isakmp.c:1689:isakmp_post_acquire(): IPsec-SA r
equest for 192.168.2.100 queued due to no phase1 found.
2003-02-21 18:11:37: INFO: isakmp.c:794:isakmp_ph1begin_i(): initiate new 
phase 1 negotiation: 192.168.1.100[500]&lt;=&gt;192.168.2.100[500]
2003-02-21 18:11:37: INFO: isakmp.c:799:isakmp_ph1begin_i(): begin Identit
y Protection mode.
2003-02-21 18:11:37: INFO: vendorid.c:128:check_vendorid(): received Vendor
 ID: KAME/racoon
2003-02-21 18:11:37: INFO: vendorid.c:128:check_vendorid(): received Vendor
 ID: KAME/racoon
2003-02-21 18:11:38: INFO: isakmp.c:2417:log_ph1established(): ISAKMP-SA es
tablished 192.168.1.100[500]-192.168.2.100[500] spi:6a01ea039be7bac2:bd288f
f60eed54d0
2003-02-21 18:11:39: INFO: isakmp.c:938:isakmp_ph2begin_i(): initiate new p
hase 2 negotiation: 192.168.1.100[0]&lt;=&gt;192.168.2.100[0]
2003-02-21 18:11:39: INFO: pfkey.c:1106:pk_recvupdate(): IPsec-SA establish
ed: ESP/Tunnel 192.168.2.100->192.168.1.100 spi=68291959(0x4120d77)
2003-02-21 18:11:39: INFO: pfkey.c:1318:pk_recvadd(): IPsec-SA established:
 ESP/Tunnel 192.168.1.100->192.168.2.100 spi=223693870(0xd554c2e)</screen></para>
		</sect3>
		
		<sect3 id="ipsec-howto-kametools-racoon-x509"><title>X.509 Sertifikaları</title>
	<para><command>Racoon</command> kimlik denetimi için X.509 sertifikalarının kullanımını destekler. Bu sertifikalar bir sertifika otoritesinden (CA) kontrol edilebilirler. Yapılandırma PSK yapılandırmasına çok benzer, sadece kimlik kanıtlama bölümü farklıdır:<screen>path certificate "/etc/certs";

remote 192.168.2.100 {
	exchange_mode main;
	certificate_type x509 "my_certificate.pem" "my_private_key.pem";
	verify_cert on;
	my_identifier asn1dn;
	peers_identifier asn1dn;
	proposal {
		encryption_algorithm 3des;
		hash_algorithm md5;
		authentication_method rsasig;
		dh_group modp1024;
	}
}
					
sainfo address 172.16.1.0/24 any address 172.16.2.0/24 any {
	pfs_group modp768;
	encryption_algorithm 3des;
	authentication_algorithm hmac_md5;
	compression_algorithm deflate;
}</screen></para>
<para>Sertifika ve özel anahtar <filename>/etc/certs</filename> dizininde bulunur. Bu dizinin yolu yapılandırma dosyasında <command>path certificate</command> değişkeninde belirtilir. Sertifikalar ve sertifika iptal listeleri <command>openssl</command> ile oluşturulan PEM dosya biçiminde saklanırlar. Bu sertifikaların oluşturulmasıyla ilgili bilgileri <xref linkend="ipsec-howto-x509"/> bölümünde bulabilirsiniz. Eğer tarafların sertifikaları bir sertifika otoritesinden kontrol edilecekse (öntanımlı değer olan <command>verify_cert on</command> ise) CA'nın sertifikası da bu dizinde bulundurulmalıdır. OpenSSL'in sertifikayı bulabilmesi için ya adı değiştirilmeli ya da hash'i alınmış (hashed) dosyaya sembolik bağ oluşturulmalıdır:
		<screen>ln -s CAfile.pem `openssl x509 -noout -hash &lt; CAfile.pem`.0</screen></para>
	<para>Eğer sertifika bir CRL dosyası ile de kontrol edilecekse bu CRL dosyası da aynı dizinde, yukarıdaki gibi bir isimle bulundurulmalıdır:
		<screen>ln -s CRLfile.pem `openssl x509 -noout -hash &lt; CAfile.pem`.r0</screen></para>
	<para>Sertifikaları ve özel anahtarı saklarken <command>racoon</command>'un özel anahtarı deşifreleyemeyeceğini unutmamak gerekir. Bu yüzden özel anahtar deşifrelenmiş düz metin formunda saklanmalıdır. Şifrelenmiş bir özel anahtarı aşağıdaki gibi deşifreleyebilirsiniz:<screen># openssl rsa -in my_private_key.pem -out my_private_key.pem
read RSA key
Enter PEM pass phrase: password
writing RSA key</screen>
	</para>
		</sect3>
		
	<sect3 id="ipsec-howto-kametools-racoon-roadwarrior"><title>Roadwarrior</title>
	<para>Roadwarrior bir VPN ağ geçidine bağlanmak için bilinmeyen dinamik IP adreslerini kullanan istemcilerdir. <command>racoon</command> ile birlikte kullanımında iki problem ortaya çıkar:<itemizedlist>
		<listitem>IP adresi bilinmediğinden <command>racoon</command> yapılandırma dosyasında veya <filename>/etc/psk.txt</filename> dosyasında belirtilemez. İstemcinin kimliğini belirlemenin başka bir yolu bulunmalıdır. Önceden paylaşılmış anahtarlar kullanıldığında saldırgan mod seçilmelidir.En iyi çözüm X.509 sertifikalarını kullanmak olacaktır.</listitem>
		<listitem>Hedef IP adresi belirsiz olduğundan <command>racoon</command> için bir güvenlik politikası yaratılamaz. <command>racoon</command> güvenlik politikasını ve güvenlik anlaşmasını bağlantı başlatıldığında oluşturmalıdır.</listitem></itemizedlist>
	</para>
	<para>Bunu yapabilmek için <filename>/etc/racoon.conf</filename> yapılandırma dosyasında bazı düzenlemelerin yapılması gereklidir:<screen>path certificate "/etc/certs";
	
remote anonymous {
	exchange_mode main;
	generate_policy on;
	passive on;
	certificate_type x509 "my_certificate.pem" "my_private_key.pem";
	my_identifier asn1dn;
	peers_identifier asn1dn;
	proposal {
	encryption_algorithm 3des;
	hash_algorithm md5;
	authentication_method rsasig;
	dh_group modp1024;
	}
}
	
	
sainfo anonymous {
	pfs_group modp1024;
	encryption_algorithm 3des;
	authentication_algorithm hmac_md5;
	compression_algorithm deflate;
}</screen>
</para>
	<para><command>generate_policy on</command> seçeneği <command>racoon</command>'a yeni bir bağlantı başlatıldığında uygun bir politika yaratması gerekitiğini bildirir. <command>passive on</command> seçeneği ise <command>racoon</command>'un dışarıdan yeni bir bağlatı başlatılana dek pasif halde kalmasını söyler. <command>racoon</command> bir bağlantı başlatmamalıdır.</para>
	<para>Yine de en önemli değişiklik <command>remote</command> ve <command>sainfo</command> satırlarındaki <command>anonymous</command> tanımlamasıdır. Bu sayede <command>racoon</command> her yerden gelen bağlantıları kabul edecektir.</para>
		</sect3>
	</sect2>	
	<sect2 id="ipsec-howto-kametools-nattraversal"><title>Aykırı NAT</title>
		<para>Linux 2.6 çekirdeği tünel modunda aykırı NAT yapabilme kapasitesine sahiptir. Transfer modu henüz desteklenmemektedir. Bu <command>ipsec-tools</command>'un 0.3.3 sürümünden itibaren Racoon ile yapılabilir.</para>
		<para>Racooon'un aykırı NAT için yapılandırılabilmesi için yapılandırma dosyasına bir çok seçenek eklenmiştir. Bunlar: <command>natt_keepalive</command>, <command>isakmp_natt</command>, <command>nat_traversal</command> dir.</para>
		<para>En önemli seçenek <command>nat_traversal</command>'dir. Bu seçeneğe değer olarak <command>on</command>, <command>off</command> veya <command>force</command> değerleri atanabilir. <command>On</command> atandığında, yol üzerinde bir NAT aygıtı algılanır algılanmaz aykırı NAT kullanılmaya başlanır. <command>Off</command> bu özelliğin kullanılmasını iptal eder. <command>force</command> kullanıldığında ise bir NAT aygıtı bulunsun veya bulunmasın aykırı NAT kullanılacaktır.</para>
		<para>NAT aygıtlarının çoğu bir trafik olmadığında hızlı bir şekilde kendi iç tablolarındaki girdileri unuttuklarından, <command>racoon</command> ağdan keepalive paketleri göndermeyi önerir. Bu paketler ön tanımlı olarak her 20 saniyede bir gönderilirler. Bu değeri <command>natt_keepalive</command> değişkenini kullanarak değiştirebilirsiniz. Eğer değer olarak 0 verirseniz bu özelliği kapatmış olursunuz.</para>
		<para>Aykırı NAT kullanmak isterseniz racoon'un yapılandırma dosyasının <command>listen</command> bölümünde kullanılacak IP adresini ve portu belirtmeniz gerekir. Bu <command>isakmp_natt</command> kullanılarak yapılır.</para>
		<para>Örnek olması için aşağıda 192.168.2.100 adresli tarafın 192.168.1.1 adresine sahip NAT aygıtı arkasında olduğu bir durumun yapılandırma dosyası verilmektedir:s<screen>path pre_shared_key "/etc/psk.txt";
			
timer  {
	natt_keepalive 10sec;
	}

listen {
	isakmp 192.168.1.100 [500];
	isakmp_natt 192.168.1.100 [4500];
}
			
remote 192.168.1.1 {
	exchange_mode main;
	nat_traversal on;
	proposal {
		encryption_algorithm 3des;
		hash_algorithm md5;
		authentication_method pre_shared_key;
		dh_group modp1024;
	}
}
			
sainfo address 172.16.1.0/24 any address 172.16.2.0/24 any {
	pfs_group modp768;
	encryption_algorithm 3des;
	authentication_algorithm hmac_md5;
	compression_algorithm deflate;
}</screen>
</para><para>Herşeyi doğru yapılandırmışsanız NAT otomatik olarak algılanacaktır:<screen>2004-12-22 07:34:53: INFO: @(#)ipsec-tools 0.4 (http://ipsec-tools.sourceforge.net)
2004-12-22 07:34:53: INFO: @(#)This product linked OpenSSL 0.9.7a Feb 19 2003 (http://www.openssl.org/)
2004-12-22 07:34:53: INFO: 192.168.1.100[4500] used as isakmp port (fd=6)
2004-12-22 07:34:53: INFO: 192.168.1.100[4500] used for NAT-T
2004-12-22 07:34:53: INFO: 192.168.1.100[500] used as isakmp port (fd=7)
2004-12-22 07:35:09: INFO: respond new phase 1 negotiation: 192.168.1.100[500]&lt;-&gt;192.168.1.1[500]
2004-12-22 07:35:09: INFO: begin Identity Protection mode.
2004-12-22 07:35:09: INFO: received Vendor ID: draft-ietf-ipsec-nat-t-ike-02
2004-12-22 07:35:09: INFO: received Vendor ID: RFC XXXX
2004-12-22 07:35:09: INFO: Selected NAT-T version: RFC XXXX
2004-12-22 07:35:09: INFO: Hashing 192.168.1.100[500] with algo #1 
2004-12-22 07:35:09: INFO: NAT-D payload #0 verified
2004-12-22 07:35:09: INFO: Hashing 192.168.1.1[500] with algo #1 
2004-12-22 07:35:09: INFO: NAT-D payload #1 doesn't match
2004-12-22 07:35:09: INFO: NAT detected: PEER
2004-12-22 07:35:10: INFO: Hashing 192.168.1.1[500] with algo #1 
2004-12-22 07:35:10: INFO: Hashing 192.168.1.100[500] with algo #1 
2004-12-22 07:35:10: INFO: Adding remote and local NAT-D payloads.
2004-12-22 07:35:10: INFO: NAT-T: ports changed to: 192.168.1.1[4500]&lt;-&gt;192.168.1.100[4500]
2004-12-22 07:35:10: INFO: KA list add: 192.168.1.100[4500]->192.168.1.1[4500]
2004-12-22 07:35:10: INFO: ISAKMP-SA established 192.168.1.100[4500]-192.168.1.1[4500] spi:0613dc09c4ccc828:9cc9dfc9acc82eb5
2004-12-22 07:35:11: INFO: respond new phase 2 negotiation: 192.168.1.100[0]&lt;-&gt;192.168.1.1[0]
2004-12-22 07:35:11: INFO: Adjusting my encmode UDP-Tunnel->Tunnel
2004-12-22 07:35:11: INFO: Adjusting peer's encmode UDP-Tunnel(3)->Tunnel(1)
2004-12-22 07:35:11: INFO: IPsec-SA established: ESP/Tunnel 192.168.1.1->192.168.1.100 spi=95762109(0x5b536bd)
2004-12-22 07:35:11: INFO: IPsec-SA established: ESP/Tunnel 192.168.1.100->192.168.1.1 spi=222871470(0xd48bfae)</screen>
	</para>
	<para>Hattaki paketlere baktığınızda UDP trafiğinin geriye ve öne çapraz gittiğini göreceksiniz:
<screen>[root@bibo root]# tcpdump
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on tap1, link-type EN10MB (Ethernet), capture size 96 bytes
13:37:41.920621 IP 192.168.1.1.isakmp > 192.168.1.100.isakmp: isakmp: phase 1 I ident
13:37:41.941296 IP 192.168.1.100.isakmp > 192.168.1.1.isakmp: isakmp: phase 1 R ident
13:37:42.051826 IP 192.168.1.1.isakmp > 192.168.1.100.isakmp: isakmp: phase 1 I ident
13:37:42.157134 IP 192.168.1.100.isakmp > 192.168.1.1.isakmp: isakmp: phase 1 R ident
13:37:42.353942 IP 192.168.1.1.4500 > 192.168.1.100.4500: UDP, length 72
13:37:42.361530 IP 192.168.1.100.4500 > 192.168.1.1.4500: UDP, length 72
13:37:42.373799 IP 192.168.1.1.4500 > 192.168.1.100.4500: UDP, length 88
13:37:43.374630 IP 192.168.1.100.4500 > 192.168.1.1.4500: UDP, length 1
13:37:43.384476 IP 192.168.1.1.4500 > 192.168.1.100.4500: UDP, length 256
13:37:43.431219 IP 192.168.1.100.4500 > 192.168.1.1.4500: UDP, length 256
13:37:43.436680 IP 192.168.1.1.4500 > 192.168.1.100.4500: UDP, length 56
13:37:44.492976 IP 192.168.1.1.4500 > 192.168.1.100.4500: UDP, length 1
13:37:45.390137 IP 192.168.1.1.4500 > 192.168.1.100.4500: UDP, length 116
13:37:45.390612 IP 192.168.1.100.4500 > 192.168.1.1.4500: UDP, length 116
13:37:46.395603 IP 192.168.1.1.4500 > 192.168.1.100.4500: UDP, length 116
13:37:46.396009 IP 192.168.1.100.4500 > 192.168.1.1.4500: UDP, length 116</screen>
	</para>
	<para>Eğer Racoon'u roadwarrior kurulu olmadan sabit adreslerle kullanıyorsanız yukarıdaki gibi güvenlik politikalarınızı da düzenlemeniz gerekir. Yaılacak değişiklikler nat işlemi yapıldıktan sonraki adresleri göstermek olmalıdır. Bu senaryoya uygun politikalar şöyle olmalıdır:
<screen>#!/usr/sbin/setkey -f
#
# Flush SAD and SPD
flush;
spdflush;

# Create policies for racoon
spdadd 172.16.1.0/24 172.16.2.0/24 any -P out ipsec
esp/tunnel/192.168.1.100-192.168.1.1/require;

spdadd 172.16.2.0/24 172.16.1.0/24 any -P in ipsec
esp/tunnel/192.168.1.1-192.168.1.100/require;</screen>
	</para>
	<para>Racoon yapılandırmanızda <command>generate_policy on</command> yapmışsanız bu politikalar otomatik olarak oluşturulacaktır.</para>
	</sect2>	
</sect1>

<sect1 id="ipsec-howto-isakmpd"><title>OpenBSD'nin isakmpd aracını kullanılan Linux 2.6 Çekirdeği</title>
	<para>Thomas Walpuski has ported the IKE daemon of the OpenBSD operating system to Linux (http://bender.thinknerd.de/~thomas/IPsec/isakmpd-linux.html). The isakmpd can now be used on Linux kernel 2.5.47+ and 2.6.x to setup IPsec VPNs. This chapter will describe the installation and configuration of the isakmpd.</para>
	<sect2 id="ipsec-howto-isakmpd-installation"><title>Kurulum</title>
		<para>If you are using a RPM based distribution or Debian the installation may be done using the appropiate package tools. The author of this document has compiled an RPM package of the isakmpd for the Linux kernel 2.6.0 (http://www.spenneberg.org/VPN/Kernel-2_6_IPsec). Please be aware, that this package may not work on testversions, because the ABI in the kernel has been changed several times. The debian project includes a package which may be installed using apt-get install isakmpd.</para>
			
		<para>When installing from source you need the keynote package (http://www1.cs.columbia.edu/~angelos/keynote.html) if you want to use X.509 certificates. Additionally you need a Linux kernel 2.5.47+ or 2.6.x.</para>
			
		<para>To get the isakmpd sources follow the steps mentioned on the webpage of Thomas Walpuski. Then edit the GNUmakefile accordingly and activate the line OS=linux. If you are not keeping the Linux kernel in /usr/src/linux you will need to additionally modify the file sysdep/linux/GNUmakefile.sysdep.</para>
			
		<para>The compilation may be done using the command make.</para>
		<para>The isakmpd comes with two additional commands: keyconv and certpatch. These tools are in the subdirectory apps and may be compiled by hand (They are part of my RPM-package). Certpatch can add a SubjectAltName to an existing certificate while keyconv converts DNSSEC to openssl keys and vice-versa.</para>
			
		<para>I was able to compile these tools successfully using (Your mileage may vary.):
			
	<screen>gcc -DMP_FLAVOUR=MP_FLAVOUR_GMP -I../.. -I../../sysdep/linux   -I /usr/src/linux-2.6.0 -lcrypto -lgmp certpatch.c -o certpatch
gcc  -I../.. -I../../sysdep/linux   -I /usr/src/linux-2.6.0 -lcrypto -lgmp base64.c keyconv.c -o keyconv</screen></para>
			
			
		<para>One last caveat: All manpages are in Latin1 format. Red Hat 9 cannot display these manpages. You have to convert them to be able to read them (done in the RPM-package): iconv --from-code LATIN1 --to-code UTF-8 --output isakmpd2.8 isakmpd.8</para>
			
			<para>When the isakmpd has been compiled, generate the mandatory directory structure:
			
			<screen>mkdir /etc/isakmpd
mkdir /etc/isakmpd/ca
mkdir /etc/isakmpd/certs
mkdir /etc/isakmpd/keynote
mkdir /etc/isakmpd/crls
mkdir /etc/isakmpd/private
mkdir /etc/isakmpd/pubkeys</screen>
      </para>
	</sect2>
	<sect2 id="ipsec-howto-isakmpd-psk"><title>Önceden Paylaşılan Anahtarları (PSK) Kullanmak</title>
		<para>The isakmpd uses one configuration file and one policy file. These are the file /etc/isakmpd/isakmpd.conf and /etc/isakmpd/isakmpd.policy. The configuration uses the well known format called .INI style. Each section starts with a line like:
			
			<screen>[section]</screen></para>
			
			
	<para>Within the section you can assign a value to a tag:
			
			<screen>tag=value</screen></para>
			
		<para>If the value is longer than one line you can use the Backslash technique to use several lines. Comments may be put anywhere using the hash mark #.</para>
			
			<para>To start we will look at a simple configuration which uses a preshared secret for the authentication. Please take a look at Figure 5 in the Section called Tunnel Mode for the setup.
			
			<screen>[General]
Listen-on=              192.168.1.100

[Phase 1]
192.168.2.100=                ISAKMP-peer-west

[Phase 2]
Connections=            IPsec-east-west

[ISAKMP-peer-west]
Phase=                  1
Local-address=          192.168.1.100
Address=                192.168.2.100
Authentication=         ThisIsThePassphrase

[IPsec-east-west]
Phase=                  2
ISAKMP-peer=            ISAKMP-peer-west
Configuration=          Default-quick-mode
Local-ID=               Net-east
Remote-ID=              Net-west

[Net-west]
ID-type=                IPV4_ADDR_SUBNET
Network=                172.16.2.0
Netmask=                255.255.255.0

[Net-east]
ID-type=                IPV4_ADDR_SUBNET
Network=                172.16.1.0
Netmask=                255.255.255.0

[Default-quick-mode]
DOI=                    IPSEC
EXCHANGE_TYPE=          QUICK_MODE
Suites=                 QM-ESP-3DES-MD5-PFS-SUITE</screen>
      </para>
      <para>This configuration file describes a tunnel between the two gateways 192.168.1.100 and 192.168.2.100. This tunnel may be used by 172.16.1.0/24 and 172.16.2.0/24. This configuration file is specifically for the gateway 192.168.1.100.</para>
	      
      <para>Let's look at the individual sections. The first section [General] describes the general setup. Here we define if isakmpd should bind to specific IP addresses during startup. This is recommended if you have several IP addresses on your VPN gateway.</para>
	      
      <para>The section [Phase 1] describes which configuration to use for the peer using the IP address 192.168.2.100. If the IP address of the peer is not known (roadwarrior) you can use default instead.</para>
	      
      <para>The section [Phase 2] describes the tunnels to create once a Phase 1 authentication has been established. If isakmpd may not actively start the connections use Passive-connections instead.</para>
	      
      <para>Now you have to define the names you referred to in the Phase 1 and Phase 2 sections. First we define the ISAKMP-peer-west. This definition is used in Phase 1 and we know the Local-address and the remote Address. If the remote address is not known, just remove this tag. Authentication should be done using a preshared key which is given in cleartext.</para>
	      
      <para>Next the tunnel IPsec-east-west is defined. It is used in Phase 2 and shall be established with the ISAKMP-peer ISAKMP-peer-west. We want to define the Configuration of the connection and the additional IDs for the tunnel (Local-ID and Remote-ID).</para>
	      
      <para>Since these IDs are referrals again, we have to define them. The ID-type may be IPV4_ADDR, IPV6_ADDR, IPV4_ADDR_SUBNET and IPV6_ADDR_SUBNET.</para>
	      
      <para>Last but not least we have to define the quick-mode configuration, we referred to in the description of the tunnel. We define the DOI (default: IPSEC), the EXCHANGE_TYPE (default: QUICK_MODE) and the Suites to use. This is QuickMode-Encapsulated-Security-Payload-3DES-Encryption-MD5-HMAC-Perfect-Forward-Secrecy. You can specify several suites seperated by commas. Read the man-page for all possible transforms and suites.</para>
      <para>The isakmpd.policy file is much shorter. The next listing shows an example:
	      
	      <screen>KeyNote-Version: 2
Authorizer: "POLICY"
Licensees: "passphrase:ThisIsThePassphrase"
Conditions: app_domain == "IPsec policy" &amp;&amp;
esp_present == "yes" &amp;&amp;
esp_enc_alg == "3des" &amp;&amp;
esp_auth_alg == "hmac-md5" -&gt; "true";</screen>
      </para>
      <para>For testing the connection start the isakmpd using the following line:
	      
      <screen>isakmpd -d -4 -DA=90</screen></para>
	      
	<para>This will start the isakmpd in foreground (-d) using IPv4 (-4) and a debuglevel of 90.</para>
	      
	<para>Once the connection has started you should be able to ping from one subnet to the other subnet. If you have also installed the ipsec-tools you can use the command setkey to view the policies and security associations added by the isakmpd. If you kill the isakmpd running in foreground using ctrl-c, it does not flush the SAD and SPD. You will have to do this manually using the command setkey. If you kill the isakmpd using the command kill -TERM it will flush the SAD and SPD!</para>
	</sect2>
	<sect2 id="ipsec-howto-isakmpd-x509"><title>X.509 Sertifikalarını Kullanmak</title>
		<para>The isakmpd may also use X.509 certificates for the authentication process. You can create your certificates using the usual tools and need for each machine, taking part in the VPN, the following files:
			<itemizedlist><listitem>/etc/isakmpd/private/local.key The private key of the machine in .pem format. Permissions must be 600.</listitem>
			<listitem>/etc/isakmpd/ca/ca.crt The certificate of the certificate authority you trust.</listitem>
			<listitem>/etc/isakmpd/certs/ip-address.crt The certificate of the local machine.</listitem></itemizedlist></para>
	<para>For isakmpd to find and use the certificate it has to include a SubjectAltName. This X.509v3 extension can be defined during generation of the certificate or later using the command certpatch. This command needs the private key of the CA, extracts the certificate, adds the extension and signs the certificate again.
		
	<screen>certpatch -i ip-address -k ca.key  originalcert.crt newcert.crt</screen></para>
		
		
	<para>Certpatch can add an IP address, a FQDN or a UFQDN to the certificate.</para>
	<para>Once these files are stored in the appropiate folders and have the appropiate permissions assigned, you can create the configuration and the policy file. In the configuration file just remove the line Authentication. and add a line ID=East to the ISAKMP-peer-west section. Then define East. Additionally you have to specifiy the X.509 directories. The full configuration file follows:
		
		<screen>[General]
Listen-on=              192.168.1.100

[Phase 1]
192.168.2.100=                ISAKMP-peer-west

[Phase 2]
Connections=            IPsec-east-west

[ISAKMP-peer-west]
Phase=                  1
Local-address=          192.168.1.100
Address=                192.168.2.100
ID=                     East

[East]
ID-type=                IPV4_ADDR
Address=                192.168.1.100

[IPsec-east-west]
Phase=                  2
ISAKMP-peer=            ISAKMP-peer-west
Configuration=          Default-quick-mode
Local-ID=               Net-east
Remote-ID=              Net-west

[Net-west]
ID-type=                IPV4_ADDR_SUBNET
Network=                172.16.1.0
Netmask=                255.255.255.0

[Net-east]
ID-type=                IPV4_ADDR_SUBNET
Network=                172.16..2.0
Netmask=                255.255.255.0

[Default-quick-mode]
DOI=                    IPSEC
EXCHANGE_TYPE=          QUICK_MODE
Suites=                 QM-ESP-3DES-MD5-PFS-SUITE
[X509-certificates]
CA-directory=           /etc/isakmpd/ca/
Cert-directory=         /etc/isakmpd/certs/
Private-key=            /etc/isakmpd/private/local.key</screen>
      </para>
      <para>The policy file needs to be modified, too. Since you only want to allow peers using certificates signed by the trusted CA add the following line after the line Authorizer. The full policy file follows:
	      
	      <screen>KeyNote-Version: 2
Authorizer: "POLICY"
Licensees: "DN:/C=DE/ST=NRW/L=Steinfurt/O=Spenneberg.Com/OU=VPN/CN=RootCA"
Conditions: app_domain == "IPsec policy" &amp;&amp;
esp_present == "yes" &amp;&amp;
esp_enc_alg == "3des" &amp;&amp;
esp_auth_alg == "hmac-md5" -> "true";</screen>
      </para>
      <para>The text after DN: has to match the subject line of the CA certificate:
	      
      <screen>openssl x509 -in ca/ca.crt -noout -subject</screen></para>
	      
	      
	<para>Now you can start the isakmpd as usual to test the configuration.</para>
	</sect2>

</sect1>

<sect1 id="ipsec-howto-x509"><title>X.509 Sertifikaları Oluşturmak</title>
	<para>Today almost all VPN implementations allow the usage of X.509 certificate for the authentication of the peers. These are the same certificates as used for the implementation of the Secure Socket Layer (SSL) in the HTTP protocol.</para>
		
	<para>This chapter will briefly cover the creation of these certificates.</para>
	<sect2 id="ipsec-howto-x509-openssl"><title>OpenSSL Kullanmak</title>
		<para>The easiest way to create X.509 certificates on Linux is the openssl command and the auxiliary tools. When the OpenSSL package has been installed usually an auxillary command CA and/or CA.pl, has been installed, too. We will use this command to create the certificates.</para>
			
		<para>First check where the command has been installed. It is usually not in your path! On Red Hat Linux distributions it is installed in /usr/share/ssl/misc/CA.</para>
		<para>Now create your certificate authority first.
			
			<screen>$ mkdir certs
$ cd certs
$ /usr/share/ssl/misc/CA -newca
CA certificate filename (or enter to create) &lt;enter&gt;
	
Making CA certificate ...
Using configuration from /usr/share/ssl/openssl.cnf
Generating a 1024 bit RSA private key
................++++++
..............++++++
writing new private key to './demoCA/private/./cakey.pem'
Enter PEM pass phrase: capassword
Verifying password - Enter PEM pass phrase: capassword
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [DE]:
State or Province Name (full name) [NRW]:
Locality Name (eg, city) [Steinfurt]:
Organization Name (eg, company) [Spenneberg.com]:
Organizational Unit Name (eg, section) []:
Common Name (eg, your name or your server's hostname) []:RootCA 2003
Email Address []:ralf@spenneberg.net</screen>
      </para>
      <para>Please enter the appropiate values when asked for Country Name, etc. If you would like to have the correct values proposed (like above in my case) edit your openssl.cnf file. On Red Hat Linux systems you may usually find it at /usr/share/ssl/openssl.cnf.</para>
	      
      <para>The created certificate authority is only valid for one year. Often you want a longer lifetime for the certificate of your CA. Since the certificates you are signing later on usually have a shorter lifetime it is not practical to edit the openssl.cnf file. Rather change the lifetime manually:
	      
      <screen>$ cd demoCA/
$ openssl x509 -in cacert.pem -days 3650 -out cacert.pem
-signkey ./private/cakey.pem
Getting Private key
Enter PEM pass phrase: capassword
$ cd ..</screen>
      </para>
      <para>The certificate authority is now ready to go. Let's create a certificate signing request:
	      
	      <screen>$ /usr/share/ssl/misc/CA -newreq
Using configuration from /usr/share/ssl/openssl.cnf
Generating a 1024 bit RSA private key
...............................++++++
...................................++++++
writing new private key to 'newreq.pem'
Enter PEM pass phrase: certpassword
Verifying password - Enter PEM pass phrase: certpassword
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [DE]:
State or Province Name (full name) [NRW]:
Locality Name (eg, city) [Steinfurt]:
Organization Name (eg, company) [Spenneberg.com]:
Organizational Unit Name (eg, section) []:
Common Name (eg, your name or your server's hostname) []:VPN-Gateway
Email Address []:ralf@spenneberg.net

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
Request (and private key) is in newreq.pem</screen>
      </para>
      <para>The file newreq.pem contains the certificate signing request and the encrypted private key. This file can later be used as a private key for FreeS/WAN or Racoon. Once the request is created, we can sign it using the certificate authority.
	      
      <screen>$ /usr/share/ssl/misc/CA -sign
Using configuration from /usr/share/ssl/openssl.cnf
Enter PEM pass phrase: capassword
Check that the request matches the signature
Signature ok
The Subjects Distinguished Name is as follows
countryName           :PRINTABLE:'DE'
stateOrProvinceName   :PRINTABLE:'NRW'
localityName          :PRINTABLE:'Steinfurt'
organizationName      :PRINTABLE:'Spenneberg.com'
commonName            :PRINTABLE:'VPN-Gateway'
emailAddress          :IA5STRING:'ralf@spenneberg.net'
Certificate is to be certified until Apr 29 06:08:56 2004 GMT (365 days)
Sign the certificate? [y/n]:y
 
 
1 out of 1 certificate requests certified, commit? [y/n]y
Write out database with 1 new entries
Data Base Updated</screen>
      </para>
      <para>Depending on the version of the command CA the certificate might be print to stdout. This will be similar to the following certificate:
	      
	      <screen>Certificate:
	      Data:
	      Version: 3 (0x2)
	      Serial Number: 1 (0x1)
	      Signature Algorithm: md5WithRSAEncryption
	      Issuer: C=DE, ST=NRW, L=Steinfurt, O=Spenneberg.com, 
	      CN=RootCA 2003/Email=ralf@spenneberg.net
	      Validity
	      Not Before: Apr 30 06:08:56 2003 GMT
	      Not After : Apr 29 06:08:56 2004 GMT
	      Subject: C=DE, ST=NRW, L=Steinfurt, O=Spenneberg.com, 
	      CN=VPN-Gateway/Email=ralf@spenneberg.net
	      Subject Public Key Info:
	      Public Key Algorithm: rsaEncryption
	      RSA Public Key: (1024 bit)
	      Modulus (1024 bit):
	      00:c5:3b:9c:36:3a:19:6c:a9:f2:ba:e9:d2:ed:84:
	      33:36:48:07:b2:a3:2d:59:92:b0:86:4c:81:2c:ea:
	      5c:ed:f3:ba:eb:17:4e:b3:3a:cc:b7:5b:5d:ca:b3:
	      04:ed:fb:59:3c:c5:25:3e:f3:ff:b0:22:10:fb:de:
	      72:0a:ee:42:4b:9a:d3:27:d3:b6:fb:e9:88:10:c8:
	      47:b7:26:4f:71:40:e4:75:c4:c0:ee:6b:87:b8:6f:
	      c9:5e:66:cf:bb:e7:ad:72:68:b8:6d:fd:8f:4c:1f:
	      3a:a2:0d:43:25:06:b9:92:e7:20:6c:86:15:a0:eb:
	      7f:f7:0b:9a:99:5d:14:88:9b
	      Exponent: 65537 (0x10001)
	      X509v3 extensions:
	      X509v3 Basic Constraints:
	      CA:FALSE
	      Netscape Comment:
	      OpenSSL Generated Certificate
	      X509v3 Subject Key Identifier:
	      CB:5C:19:9B:E6:8A:8A:FE:0E:C4:FD:5E:DF:F7:BF:3D:A8:
	      18:7C:08
	      X509v3 Authority Key Identifier:
	      keyid:01:BB:C6:33:BE:F5:9A:5E:B0:0C:5D:BD:41:E9:78:
	      6C:54:AD:66:8E
	      DirName:/C=DE/ST=NRW/L=Steinfurt/O=Spenneberg.com/
	      CN=RootCA 2003/Email=ralf@spenneberg.net
	      serial:00
	      
	      Signature Algorithm: md5WithRSAEncryption
	      6f:89:2b:95:af:f1:8d:4d:b7:df:e8:6d:f7:92:fb:48:8c:c4:
	      1a:43:68:65:97:01:87:a6:84:b5:a1:38:bd:62:74:70:db:9e:
	      78:19:d9:0c:af:18:ad:13:77:56:7d:3f:19:61:da:ba:74:30:
	      8e:c5:50:0e:e3:eb:ff:95:cd:8d:d6:7e:c3:0e:ab:5b:34:94:
	      bc:16:0f:ef:dc:de:40:bb:7d:ba:a2:b8:5d:f9:74:e7:28:58:
	      75:a0:66:d2:8d:85:ba:38:82:08:10:33:ef:be:29:c9:31:9d:
	      63:a9:f7:e0:99:ea:a7:ed:b6:b5:33:1b:1c:4a:a4:05:40:6e:
	      40:7b
	      -----BEGIN CERTIFICATE-----
	      MIIDjDCCAvWgAwIBAgIBATANBgkqhkiG9w0BAQQFADCBgjELMAkGA1UEBhMCREUx
	      DDAKBgNVBAgTA05SVzESMBAGA1UEBxMJU3RlaW5mdXJ0MRcwFQYDVQQKEw5TcGVu
	      bmViZXJnLmNvbTEUMBIGA1UEAxMLUm9vdENBIDIwMDMxIjAgBgkqhkiG9w0BCQEW
	      E3JhbGZAc3Blbm5lYmVyZy5uZXQwHhcNMDMwNDMwMDYwODU2WhcNMDQwNDI5MDYw
	      ODU2WjCBgjELMAkGA1UEBhMCREUxDDAKBgNVBAgTA05SVzESMBAGA1UEBxMJU3Rl
	      aW5mdXJ0MRcwFQYDVQQKEw5TcGVubmViZXJnLmNvbTEUMBIGA1UEAxMLVlBOLUdh
	      dGV3YXkxIjAgBgkqhkiG9w0BCQEWE3JhbGZAc3Blbm5lYmVyZy5uZXQwgZ8wDQYJ
	      KoZIhvcNAQEBBQADgY0AMIGJAoGBAMU7nDY6GWyp8rrp0u2EMzZIB7KjLVmSsIZM
	      gSzqXO3zuusXTrM6zLdbXcqzBO37WTzFJT7z/7AiEPvecgruQkua0yfTtvvpiBDI
	      R7cmT3FA5HXEwO5rh7hvyV5mz7vnrXJouG39j0wfOqINQyUGuZLnIGyGFaDrf/cL
	      mpldFIibAgMBAAGjggEOMIIBCjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1P
	      cGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQUy1wZm+aKiv4O
	      xP1e3/e/PagYfAgwga8GA1UdIwSBpzCBpIAUAbvGM771ml6wDF29Qel4bFStZo6h
	      gYikgYUwgYIxCzAJBgNVBAYTAkRFMQwwCgYDVQQIEwNOUlcxEjAQBgNVBAcTCVN0
	      ZWluZnVydDEXMBUGA1UEChMOU3Blbm5lYmVyZy5jb20xFDASBgNVBAMTC1Jvb3RD
	      QSAyMDAzMSIwIAYJKoZIhvcNAQkBFhNyYWxmQHNwZW5uZWJlcmcubmV0ggEAMA0G
	      CSqGSIb3DQEBBAUAA4GBAG+JK5Wv8Y1Nt9/obfeS+0iMxBpDaGWXAYemhLWhOL1i
	      dHDbnngZ2QyvGK0Td1Z9Pxlh2rp0MI7FUA7j6/+VzY3WfsMOq1s0lLwWD+/c3kC7
	      fbqiuF35dOcoWHWgZtKNhbo4gggQM+++KckxnWOp9+CZ6qfttrUzGxxKpAVAbkB7
	      -----END CERTIFICATE-----
	      Signed certificate is in newcert.pem</screen>
      </para>
      <para>It is now advisable to rename the files newreq.pem and newcert.pem to something more meaningful.
	      
      <screen>$ mv newcert.pem vpngateway_cert.pem
$ mv newreq.pem vpngateway_key.pem</screen>
      </para>
      <para>Now have fun creating certificates for every peer in the VPN.</para>
	      
      <para>In case a private key gets stolen or compromised, you have to revoke it because based on its lifetime it is still valid. The revoked keys are stored in the certificate revocation list (CRL). First, create an (empty) list:
	      
      <screen>$ openssl ca -gencrl -out crl.pem
Using configuration from /usr/share/ssl/openssl.cnf
Enter PEM pass phrase: capassword</screen></para>
	      
	      
      <para>You need to create the file demoCA/crlnumber manually if you get an error: No such file. Modern OpenSSL versions require this.
	      
	      
      <screen>$ echo 01 > demoCA/crlnumber</screen></para>
	      
	      
      <para>To revoke a certificate you need to have the certificate file. This is also stored in demoCA/newcerts/. The name of the certificate can be read in demoCA/index.txt. Then use the following command.
	      
      <screen>$ openssl ca -revoke compromised_cert.pem
Using configuration from /usr/share/ssl/openssl.cnf
Enter PEM pass phrase: capassword
Revoking Certificate 01.
Data Base Updated</screen></para>

      <para>Once the certificate has been revoked, the certificate revocation list has to be recreated using the above command. </para>
	</sect2>
	<sect2 id="ipsec-howto-x509-windows"><title>Windows İstemcileri için Sertifika Oluşturmak</title>
		<para>When generating certificates for Windows clients you have to make sure that the lifetime of the certificate lies within the lifetime of the CA. If the lifetime of the certificate exceeds the lifetime of the CA, the windows client will not accept the certificate!</para>
			
		<para>The easiest way to transfer certificates to a windows box is by using the PKCS#12 exchange format. Openssl can reformat the certificates to this format:
			
		<screen>$ openssl pkcs12 -export -inkey key.pem -in cert.pem -certfile cacert.pem -out export.p12 -name "Windows Cert"</screen></para>
			
			
		<para>You are asked to specify an export password. On the windows box you can then import this file using the export password.</para>
			
		<para>A tool which might help in generating the PKCS#12-File is Wincert. You find the URL to the tool in the links section.</para>
	</sect2>
</sect1>

<sect1 id="ipsec-howto-advanced"><title>Gelişmiş Yapılandırma</title>
	<sect2 id="ipsec-howto-advanced-xauth"><title>Xauth ve IKE-Mode-Config</title>
		<para>Unfortunately Xauth and IKE-Mode-Config are broken on Linux using ipsec-tools &lt;= 0.6. As soon as Xauth is working I will put up some hints on using these.</para>
	</sect2>
	<sect2 id="ipsec-howto-advanced-iptables"><title>IPtables Kuralları</title>
		<para>Using ESP in tunnel mode without compression increases the size of the packets transferred. This even happens sometimes when compression is activated. This can cause problems in tunnel mode when the client does not know that the packet is to be encapsulated. If the clients sends a packet of 1500 bytes the additional encapsulation will increase the size of the packet. For TCP-packets you can solve this problem setting the MSS on both sides of the tunnel using the iptables command:
			
		<screen>iptables -t mangle -A PREROUTING -p esp -j MARK --set-mark 1
iptables -A FORWARD -m mark --mark 1 -p tcp --tcp-flags SYN,RST SYN -j
TCPMSS --set-mss 1400</screen>
      </para>
	</sect2>
</sect1>

<sect1 id="ipsec-howto-links"><title>Bağlantılar</title>
	<para>Bu bölümde ihtiyaç duyabileceğiniz bazı araçların bağlantılarını bulacaksınız:</para>
	<para><itemizedlist>
			<listitem>IPsec-Tools: <ulink url="http://ipsec-tools.sf.net/"/></listitem>
			<listitem>Markus Mueller'in yazdığı Windows makineleri VPN'e bağlamakta kullanılan <command>ipsec.exe</command>: <ulink url="http://vpn.ebootis.de/"/></listitem>
			<listitem>PKCS#12-Sertifika dosyalarını oluşturmaya yardımcı olan <command>wincert</command>: <ulink url="http://sourceforge.net/projects/wincert/"/></listitem>
		</itemizedlist>
	</para>
</sect1>

</article>
