<?xml version="1.0" encoding="UTF-8"?>
<article id="ipsec-howto" lang="tr">
  <articleinfo>
    <title>IPsec NASIL</title>
    <author role="translator">
      <firstname>Necdet Yücel</firstname>
      <affiliation>
        <address><email>nyucel@comu.edu.tr</email></address>
      </affiliation>
    </author>
    <author>
	    <firstname>Ralf</firstname>
	    <surname>Spenneberg</surname>
       <affiliation>
	       <address><email>maintainer@ipsec-howto.org</email></address>
       </affiliation>
     </author>
    <revhistory>
      <para><emphasis role="bold">Bu çevirinin sürüm bilgileri:</emphasis></para>
      <revision>
        <revnumber>1.0</revnumber>
        <date>Ekim 2008</date>
        <authorinitials>ny</authorinitials>
        <revremark>İlk Çeviri</revremark>
      </revision>
    </revhistory>
    <revhistory>
      <para><emphasis role="bold">Özgün belgenin sürüm bilgileri:</emphasis></para>
      <revision>
	      <revnumber>0.9.96</revnumber>
          <date>2007-02-26</date>
          <authorinitials>RS</authorinitials>
	  <revremark>OpenSSL needs file: crlnumber</revremark>
       </revision></revhistory>
<copyright><year>2003-2007</year><holder>Ralf Spenneberg - Özgün belge</holder></copyright><sbr/>
<copyright><year>2008</year><holder>Necdet Yücel - Türkçe çeviri</holder></copyright>
    <legalnotice><title>Yasal Açıklamalar</title>
<para>Bu belgenin, <emphasis>IPsec NASIL</emphasis> çevirisinin 1.0 sürümünün <emphasis role="bold">telif hakkı © 2008 <emphasis>Necdet Yücel</emphasis>'e</emphasis>, özgün İngilizce sürümünün  <emphasis role="bold">telif hakkı © 2003-2007 <emphasis>Ralf Spenneberg</emphasis>'e</emphasis> aittir. Bu belgeyi, Free Software Foundation tarafından yayınlanmış bulunan <link linkend="gpl">GNU Genel Kamu Lisansının</link> 3 ya da daha sonraki sürümünün koşullarına bağlı kalarak kopyalayabilir, dağıtabilir ve/veya değiştirebilirsiniz. Bu Lisansın bir kopyasını <ulink url="http://www.gnu.org/licenses/gpl.html"/> adresinde bulabilirsiniz.</para>
  <para>BU BELGE "ÜCRETSİZ" OLARAK RUHSATLANDIĞI İÇİN, İÇERDİĞİ BİLGİLER İÇİN İLGİLİ KANUNLARIN İZİN VERDİĞİ ÖLÇÜDE HERHANGİ BİR GARANTİ VERİLMEMEKTEDİR. AKSİ YAZILI OLARAK BELİRTİLMEDİĞİ MÜDDETÇE TELİF HAKKI SAHİPLERİ VE/VEYA BAŞKA ŞAHISLAR BELGEYİ "OLDUĞU GİBİ", AŞİKAR VEYA ZIMNEN, SATILABİLİRLİĞİ VEYA HERHANGİ BİR AMACA UYGUNLUĞU DA DAHİL OLMAK ÜZERE HİÇBİR GARANTİ VERMEKSİZİN DAĞITMAKTADIRLAR. BİLGİNİN KALİTESİ İLE İLGİLİ TÜM SORUNLAR SİZE AİTTİR. HERHANGİ BİR HATALI BİLGİDEN DOLAYI DOĞABİLECEK OLAN BÜTÜN SERVİS, TAMİR VEYA DÜZELTME MASRAFLARI SİZE AİTTİR.
  </para>
  <para>İLGİLİ KANUNUN İCBAR ETTİĞİ DURUMLAR VEYA YAZILI ANLAŞMA HARİCİNDE HERHANGİ BİR ŞEKİLDE TELİF HAKKI SAHİBİ VEYA YUKARIDA İZİN VERİLDİĞİ ŞEKİLDE BELGEYİ DEĞİŞTİREN VEYA YENİDEN DAĞITAN HERHANGİ BİR KİŞİ, BİLGİNİN KULLANIMI VEYA KULLANILAMAMASI (VEYA VERİ KAYBI OLUŞMASI, VERİNİN YANLIŞ HALE GELMESİ, SİZİN VEYA ÜÇÜNCÜ ŞAHISLARIN ZARARA UĞRAMASI VEYA BİLGİLERİN BAŞKA BİLGİLERLE UYUMSUZ OLMASI) YÜZÜNDEN OLUŞAN GENEL, ÖZEL, DOĞRUDAN YA DA DOLAYLI HERHANGİ BİR ZARARDAN, BÖYLE BİR TAZMİNAT TALEBİ TELİF HAKKI SAHİBİ VEYA İLGİLİ KİŞİYE BİLDİRİLMİŞ OLSA DAHİ, SORUMLU DEĞİLDİR.
  </para>
  <para>Tüm telif hakları aksi özellikle belirtilmediği sürece sahibine aittir. Belge içinde geçen herhangi bir terim, bir ticari isim ya da kuruma itibar kazandırma olarak algılanmamalıdır. Bir ürün ya da markanın kullanılmış olması ona onay verildiği anlamında görülmemelidir.</para>
    </legalnotice>
     <abstract>
	<para>Bu belge Linux 2.6 çekirdeği üzerinde IPsec kullanarak VPN oluşturmanın temel ve ileri konularını kapsayacaktır. 2.4 çekirdeğiyle ilgili çok fazla belge olduğundan burada sadece 2.6 çekirdeği ile gelen yeni IPsec özellikleri üzerinde durulacaktır.</para>
	<para>Bu belgenin İngilizce sürümünü <ulink url="http://www.ipsec-howto.org/t1.html"> bu adreste</ulink> bulabilirsiniz.</para>
     </abstract>
  </articleinfo>
<sect1 id="ipsec-howto-intro"><title>Giriş</title>
	<para></para>
	<sect2 id="ipsec-howto-intro-reason"><title>Bu Belgenin Yazılma Nedeni</title>
		<para>Geçmişte bir çok NASIL belgesi kullandım. Çoğu benim için faydalı oldu. Linux çekirdeğinde IPsec'in yeni özelliklerinin gerçeklenimleri yapıldıkça ben de onlarla ilgilenmeye başladım. Bu konuyla ilgili çok az sayıda belge bulunduğundan bu NASIL belgesini yazmaya başladım.</para>
	</sect2>
	<sect2 id="ipsec-howto-intro-contrib"><title>Katkıda Bulunanlar</title>
	<para><itemizedlist>
		<listitem>Matija Nalis</listitem>
		<listitem>Fridtjof Busse</listitem>
		<listitem>Uwe Beck</listitem>
		<listitem>Juanjo Ciarlante</listitem>
		<listitem>Ervin Hegedus</listitem>
		<listitem>Barabara Kane</listitem>
		<listitem>Alois Schmid</listitem>
	</itemizedlist>
	</para>
	</sect2>
	
	<sect2 id="ipsec-howto-intro-docs"><title>İlgili Belgeler</title>
	<para><itemizedlist>
		<listitem><ulink url="http://www.tldp.org/HOWTO/Networking-Overview-HOWTO.html">Networking Overview HOWTO</ulink></listitem>
		<listitem><ulink url="http://www.tldp.org/HOWTO/Net-HOWTO/index.html">Networking HOWTO</ulink></listitem>
		<listitem><ulink url="http://www.tldp.org/HOWTO/Net-HOWTO/index.html">VPN-Masquerade HOWTO</ulink></listitem>
		<listitem><ulink url="http://www.tldp.org/HOWTO/VPN-HOWTO/">VPN HOWTO</ulink></listitem>
		<listitem><ulink url="http://www.tldp.org/HOWTO/VPN-HOWTO/">Advanced Routing &amp; Traffic Control HOWTO</ulink></listitem>
	</itemizedlist></para>
	</sect2>
</sect1>
<sect1 id="ipsec-howto-theory"><title>Teorik Bilgiler</title>
	<sect2 id="ipsec-howto-theory-whatis"><title>IPsec Nedir?</title>
		<para>IPsec IP protokolünün IP ve daha üst katmanlar için güvenlik sağlayan bir genişletmesidir. İlk olarak yeni IPv6 standadı için geliştirilmiş daha sonra IPv4 için "geriye yapılandırılmıştır". IPsec mimarisi RFC2401 belgesinde tanımlanmıştır. Aşağıdaki bir kaç paragraf IPsec icin kısa bir giriş olacaktır.</para>
		<para>IPsec iletişimin doğruluğunu kanıtlamak, bütünlük ve gizliliğinden emin olmak için iki farklı protokol kullanır: AH ve ESP. Tüm IP datagramını koruyabileceği gibi sadece daha üst katmanların protokollerini de koruyabilir. Bu durumlar için karşılık gelen modlar tünel ve taşıma modlarıdır. Tünel modunda IP datagramı IPsec protokolünü kullanarak yeni bir IP datagramı tarafından tamamen kapsüllenir. Taşıma modunda ise IP datagramının sadece kullanıcı verisi (payload) IPsec protokolü tarafından IPsec başlığı IP başlığı ile daha üst katman protokol başlığı arasına yerleştirilerek işlenir. (<xref linkend="ipsec-howto-mods"/>'e bakınız.)</para>
		<para><figure id="ipsec-howto-mods"><title>IPsec Tünel ve Trasport Modları</title>
			<mediaobject><imageobject>
				<imagedata fileref="ipsec/mods.png" format="PNG" align="center" scalefit="1"/>
			</imageobject></mediaobject></figure>
		</para>
		<para>IPsec protokolleri IP datagramlarının bütünlüğünü korumak için hash mesaj doğrulama kodlarını (HMAC) kullanır. MD5 ve SHA gibi hash algoritmaları kullanarak IP datagramı ve bir gizli anahtarı temel alan HMAC'i çıkartırlar. Daha sonra bu HMAC IPsec protokol başlığına eklenir ve paketin alıcısı eğer gizli anahtara erişimi varsa bu HMAC'i kontrol edebilir.</para>
		<para>IPsec protokolleri IP datagramlarının gizliliğini korumak için standat simetik şifreleme algoritmalarını kullanır. IPsec standartı NULL ve DES gerçeklenimlerine ihtiyaç duysa da günümüzde genel olarak 3DES, AES ve Blowfish gibi daha güçlü algoritmalar kullanılmaktadır.</para>
		<para>IPsec protokolleri DoS ataklarına karşı korunmak için kayan pencere kullanırlar. Her paketin ardışık bir numarası vardır ve bir paket sadece numarasının pencerede olması veya daha yeni olması durumunda kabul edilir. Eski paketler hızla gözardı edilirler. Böylece saldırganın orjinal paketleri kaydedip daha sonra yanıtlamasıyla yapılan cevaplama saldırılarına karşı koruma sağlanmış olur.</para>
		<para>IPsec paketlerini karşılıklı olarak kapsülleyip açabilen eşlerin gizli anahtarı, algoritmaları ve iletişimde izin verilen IP adreslerini saklamak için bir yönteme ihtiyaçları vardır. IP datagramlarının korunması için ihtiyaç duyulan bütün bu parametreler bir güvenlik anlaşmasında (security association) (SA) saklanır. Güvenlik anlaşmaları sırayla güvenlik anlaşmaları veritabanında (SAD) saklanırlar.</para>
		<para>Her bir güvenlik anlaşması aşağıdaki parametreleri tanımlar:
			<itemizedlist><listitem>Oluşan IPsec başlığının hedef ve kaynak IP adresleri. Bu adresler paketleri koruyan IPsec eşlerinin IP adresleridir.</listitem>
				<listitem>IPsec protokolü (AH veya ESP), bazen sıkıştırma (IPCOMP) da desteklenir.</listitem>
				<listitem>IPsec protokolünün kullandığı gizli anahtar ve protokol.</listitem>
				<listitem>Güvenlik Parametre Dizini (Security Parameter Index - SPI). Bu güvenlik anlaşmasını belirleyen 32-bit bir sayıdır.</listitem>
			</itemizedlist>
		</para>
		<para>Bazı güvenlik anlaşması veritabanı gerçeklenimleri başka parametrelerin de saklanmasına izin verir:
			<itemizedlist><listitem>IPsec modu (tünel veya taşıma)</listitem>
				<listitem>Cevap ataklarına karşı koruma sağlayan kayan pencerenin büyüklüğü.</listitem>
				<listitem>Güvenlik anlaşmasının geçerlilik süresi.</listitem>
			</itemizedlist>
		</para>
		<para>Güvenlik anlaşması kaynak ve hedef IP adreslerini tanımladığından çift yönlü IPsec iletişiminde sadece bir yöndeki trafikte koruma sağlayabilir. IPsec her iki yönde de koruma sağlamak için iki adet tek yönlü güvenlik anlaşmasına ihtiyaç duyar.</para>
		<para>Güvenlik anlaşmaları sadece IPsec'in trafiği nasıl koruyacağını belirlerler. Hangi trafiğin ne zaman korunacağını tanımlamak için ilave bilgiye ihtiyaç duyulur. Bu bilgi günelik anlaşması veritabanında bulundurulan güvenlik politikasında (SP) saklanır.</para>
		<para>Bir güvenlik politikası aşağıdaki parametreleri belirler:
			<itemizedlist><listitem>Korunacak paketlerin kaynak ve hedef adresleri. Taşıma modunda bu adresler SA'daki adreslerle aynı olurlar! Tünel modunda farklı olabilirler!</listitem>
				<listitem>Korunacak protokol (ve port). Bazı IPsec gerçeklenimleri özel protokolün korunmak için tanımlanmasın aizin vermezler. Böyle bir durumda belirtilen IP adresleri arasındaki tüm trafik korunur.</listitem>
				<listitem>Paketlerin korunmasında kullanılacak güvenlik anlaşması.</listitem>
			</itemizedlist>
		</para>
		<para>Güvenlik anlaşmasının elle yapılandırılması hataya yatkın ve çok gğvenli de değildir. Gizli anahtarların ve şifreleme algoritmalarının sanal özel ağdaki tüm eşler arasında faylaşılması gerekir. Özellikle anahtarların değişimi sistem yöneticisi için kritik problemler yaratır: Henüz bir şifreleme sağlanmamışken simetrik anahtarların değişimi nasıl yapılacaktır?</para>
		<para>Bu problemin çözümü için internet anahtar değişim protokolü (IKE) geliştirilmiştir. Bu protokol ilk olarak eşlerin kimlik denetimini yapar, ardından güvenlik anlaşmaları tertip edilir ve simetrik anahtarlar Diffie Hellmann anahtar değişimi kullanılarak seçilir. IKE protokolü gizli anahtarların güvenliğinden emin olmak için periyodik olarak yapılacak anahtar yenilemelerinde de devreye girer.</para>
	</sect2>	
	<sect2 id="ipsec-howto-theory-protocols"><title>IPsec Protokolleri</title>
		<para>IPsec protokol ailesi iki bağımsız IP protokolünden oluşur: Kimlik Kanıtlama Başlığı (AH) ve Kapsüllenen Güvenlik Yükü (ESP). AH 51 ve ESP ise 50 numaralı protokollerdir (ayrıntı için <filename>/etc/protocols</filename> dosyasına bakabilirsiniz). Aşağıdaki iki bölümde bu protokollerin özelliklerini özet olarak bulacaksınız.</para>
		<sect3 id="ipsec-howto-theory-protocols-ah"><title>AH - Kimlik Kanıtlama Başlığı</title>
			<para>AH protokolü IP datagramının bütünlüğünü korur. Bunu yapabilmek için datagramın HMAC'ini hesaplar. HMAC hesaplanırken gizli anahtar, paketteki kullanıcı verisi ve IP başlığındaki IP adresi gibi değişmeyen bölümleri temel alınır. Bu bilgi daha sonra paketin AH başlığına eklenir. AH başlığı <xref linkend="ipsec-howto-ah_header"/>'de gösterilmektedir.</para>
			<para><figure id="ipsec-howto-ah_header"><title>Paketin bütünlüğünü koruyan AH Başlığı</title>
					<mediaobject><imageobject>
							<imagedata fileref="ipsec/ah_header.png" format="PNG" align="center" scalefit="1"/>
			</imageobject></mediaobject></figure></para>
			<para>AH başlığı 24 byte uzunluğundadır. İlk byte <emphasis>Next Header</emphasis> alanıdır. Bu alan takip eden başlığın protokolünü belirtir. Tünel modunda bütüm IP datagramı kapsüllendiğinden bu alanın değeri 4'tür. Bir TCP datagramı taşıma modunda kapsüllendiğinde kullanılan sayı ise 6'dır. Sonraki byte yükün uzunluğunu gösterir. Bu alanı iki adet ayırılmış byte takip eder. Sıradaki 32 bit uzunluğundaki alanda <emphasis>Güvenlik Parametre Dizini</emphasis> (SPI) bulunur. SPI, kapsüllenmiş paketin açılmasında kullanılacak güvenlik anlaşmasını belirler. 32 bit uzunluğundaki <emphasis>Ardışıklık Numarası</emphasis> cevaplama ataklarına karşı koruma sağlar. Son alan olan <emphasis>HMAC</emphasis> ise 96 bitlik alan kaplar. Sadece gizli anahtarı bilen eşler HMAC yaratıp onu kontrol edebildiklerinden HMAC alanı paketin bütünlüğünü korur.</para>
			<para>AH protokolü IP datagramının IP başlığındaki IP adresi gibi değişmeyen parçalarını da koruduğundan NAT'a izin vermez. Ağ Adresi Çeviricisi (NAT) IP başlığındaki IP adresini (genellikle kaynak IP) başka bir IP adresiyle değiştirir. Böylece HMAC değişeceğinden artık geçersiz olur. IPsec protokolünün bir genişletmesi olan Aykırı-NAT bu kısıtlamanın etrafından dolanan bir çözümdür.</para>
		</sect3>		
		<sect3 id="ipsec-howto-theory-protocols-esp"><title>ESP - Kapsüllenen Güvenlik Yükü</title>
			<para>ESP protokolü hem HMAC kullanarak paketin bütünlüğünü hem de şifreleme kullanarak paketin gizliğini garanti eder. Paketin şifrelendikten sonra HMAC hesaplanır ve ESP başlığı oluşturulur ve pakete eklenir. İki bölümden oluşan ESP başlığı <xref linkend="ipsec-howto-esp_header"/>'de gösterilmiştir.</para>
			<para><figure id="ipsec-howto-esp_header"><title>ESP Başlığı</title>
					<mediaobject><imageobject>
							<imagedata fileref="ipsec/esp_header.png" format="PNG" scalefit="1"/>
			</imageobject></mediaobject></figure></para>
			<para>ESP başlığındaki ilk bölüm <emphasis>Güvenlik Parametre Dizini</emphasis> (SPI)'dir. SPI kapsüllenmiş ESP paketinin açılmasında kullanılacak SA'yı belirtir. İkinci bölüm <emphasis>Ardışıklık Numarası</emphasis>dır. Bu numara cevaplama ataklarına karşı koruma sağlar. Üçüncü bölümde ise şifreleme işleminde kullanılan <emphasis>İlklendirme Vektörü</emphasis> (IV) bulunur. Simetrik şifreleme algoritmaları eğer IV kullanılmazsa frekans saldırılarına karşı zayıftırlar. IV sayasinde iki eşit yüke karşılık iki farklı şifrelenmiş yük oluştuğundundan emin olunabilir.</para>
			<para>IPsec şifreleme sürecinde blok şifreleme algoritmaları kullandığından eğer şifrelenecek yükün uzunluğu bir bloğun tam katı değilse takviye edilmelidir. Bu takviyenin uzunluğu da başlığa eklenir. Bunun ardından <emphasis>Next Header</emphasis> bölümü gelir. ESP başlığında son olarak  paketin bütünlüğünden emin olunmasını sağlayan 96 bit uzunluğundaki HMAC bulunur. IP başlığı hesaplama sürecine dahil edilmez.</para>
			<para>Bu yüzden ESP protokolü NAT kullanımına mani olmaz. Yine de bir çok durumda IPsec ile NAT'ın beraber kullanımı mümkün olmamaktadır. Aykırı-NAT ESP paketlerini UDP paketlerinin içine kapsülleyen bir çözüm sunar.</para>
		</sect3>
	</sect2>
	<sect2 id="ipsec-howto-theory-ike"><title>IKE Protokolü</title>
		<para>IKE protokolü güvenli iletişimin en ünlü sorununu çözer: eşlerin kimlik kanıtlama yapması ve simetrik anahtarların değişimi. Bu sayede güvenlik anlaşmaları yapılır ve SAD oluşturulur. IKE protokolü genellikle kullanıcı tarafı sürecine ihtiyaç duyar, işletim sisteminde bir gerçekleştirmesi yoktur. İletişim için 500/UDP portunu kullanır.</para>
		<para>IKE protokol fonksiyonları iki safhalıdır. İlk safhada <emphasis>Internet Güvenlik Anlaşması Anahtar Yönetimi Güvenlik Anlaşması</emphasis> (ISAKMP SA) tesis edilir. İkinci safhada ISAKMP SA kullanılarak IPsec SA'ları kurulur.</para>
		<para>İlk safhada eşlerin kimlik kanıtlaması RSA anahtarları veya X.509 sertifikaları (hatta Kerberos desteğindeki racoon) gibi daha önceden paylaşılan anahtarlara dayanarak yapılır.</para>
		<para>İlk safha genellikle iki farklı modu destekler: temel mod ve saldırgan mod. İki mod da eşlerin kimlik kanıtlamasını yapar ve bir ISAKMP SA oluşturur ama saldırgan mod bu işi yapmak için temel modun yarısı kadar mesaj kullanır. Bunun sakıncası saldırgan modun kimlik korumasını desteklemediğinden eğer önceden paylaşılmış anahtarlarla birlikte kullanılırsa aradaki-adam saldırılarına karşı korunmasız oluşudur. Diğer yandan bu saldırgan modun tek amacıdır. Temel mod, iç işleyişleri yüzünden bilinmeyen eşler için önceden paylaşılmış farklı anahtarların kullanımını desteklemez. Saldırgan mod kimlik korumasını desteklemez ve istemcinin kimliğini açık olarak gönderir. Bu nedenle eşler birbirini kimlik kanıtlaması gerçekleşmeden bilirler ve farklı eşler için önceden paylaşılmış farklı anahtarlar kullanılabilir.</para>
		<para>İkinci safhada IKE protokolü güvenlik anlaşma tekliflerini karşılıklı değiştirir ve ISAKMP SA sayesinde sonuca bağlar. ISAKMP SA'nın sunduğu kimlik denetimi aradaki-adam ataklarına karşı koruma sağlar. İkinci safha hızlı modu kullanır.</para>
		<para>Genellikle iki eş sadece bir ISAKMP SA üzerinde anlaşırlar ve bu kullanılarak bir çok (en azından iki adet) tek yönlü IPsec SA'ları kurulur.</para>
	</sect2>
	<sect2 id="ipsec-howto-theory-nat"><title>Aykırı NAT</title>
		<para>Aykırı NAT nedir ve neden ihtiyaç duyulur?</para>
		<para>Sıklıkla VPN'deki taraflardan biri bir NAT aygıtının arkasında bulunur. Burada sadece Kaynak-NAT cihazlarını göz önüne alacağız. Bundan sonra NAT ile Kaynak-NAT veya Maskelemeyi kastediyor olacağım. Peki bunun VPN ile nesaıl bir ilgisi var? En başta taraflardan birinin orjinal IP adresi NAT aygıtı tarafından gizlenir. NAT cihazı orjinal kaynak IP adresini kendi IP adresiyle değiştirir.</para>
		<para>Böylece IPsec AH protokolü kullanılamaz hale gelir. Ama iki taraf da doru yapılandırılırsa ESP hala kullanılabilir.</para>
		<para>Öyleyse neden Aykırı-NAT'a ihtiyaç duyulsun? Çünkü aynı NAT aygıtının arkasındaki iki makinenin dışarıya bir tünel oluşturmaya çalışmalarıyla birlikte ikisi birden çalışmaz hale gelir.</para>
		<para>Neden böyle olur? NAT aygıtı gönderdiği paketlere gelen yanıtları doğru istemcilere gönderebilmek için nat'ladığı bağlantıların kaydını tutmak zorundadır. Bu yüzden NAT aygıtında bir tablo bulunur ve nat'lanan tüm bağlantılar bu tabloya yazılır. Şimdi bir istemcinin internet üzerinden bir web sunucusuna bağladığını varsayalım. NAT cihazı istemcinin adresi yerine kendi adresini kaynak adres olarak gösterir ve tablosuna seçilen istemci protundan gelen tüm paketleri orjinal istemci1'e göndermesi gerektiği notunu alır. İkinci bir istemci iletişime başlar başlamaz aynı eşdeğer bağlantıyı kurar. Şayet ikinci istemci de tesadüfen aynı istemci portunu seçerse, NAT aygıtı bir belirsizlik olmaması için istemci portunu da değiştirecektir. Bu işlem TCP ve UDP kullanımında problem çıkartmayacaktır çünkü her ikisi de portlarla çalışmaktadır. Ama ESP port kullanmaz. Bu yüzden NAT aygıtı paketleri ayırt etmek için sadece protokolü kullanabilir. İlk istemci bağlandığında tabloya tüm ESP paketlerinin ilk istemciye "geriye-natlanması" gerektiği yazılır. İkinci istemci bağladığında bu girdinin üzerine ikinci istemciye uygun bilgiler yazılır ve böylece en azından ilk istemcinin bağlantısı kesilir.</para>
		<para>Bu duruma yardımcı olmak için Aykırı-NAT ne sunar? Aykırı-NAT benzer şekilde ESP paketlerini UDP paketlerine kapsüller. Bu bir NAT aygıtı tarafından kolayca yapılabilir çünkü portlarla çalışabilirler. Öntanımlı olarak 4500/udp portu kullanılır. Aykırı-NAT için bir çok taslak bulunmasına rağmen henüz bir RFC yoktur. Aykırı-NAT'ın güzel bir özelliği bir kez aktif hale getirildiğinde tarafların ihtiyaç duyduklarında onu otomatik olarak kullanabilmeleridir.</para>
	</sect2>
</sect1>

<sect1 id="ipsec-howto-openswan"><title>Linux 2.6 Üzerinde Çalışan Openswan</title>
	<para>Bu bölüm daha sonra yazılacak.</para>
</sect1>

<sect1 id="ipsec-howto-kametools"><title>KAME-tools kullanan Linux 2.6 Çekirdeği</title>
	<para>Bu bölümde Linux çekirdeğinin ≥2.5.47 ve 2.6.* serilerinde doğal IPsec yığınının (stack) nasıl kullanılacağı açıklanacaktır. Bu IPsec yığınının kurulumu ve yapıladırması FreeS/WAN'dan oldukça farklıdır ve FreeBSD, NetBSD ve OpenBSD gibi *BSD türevlerine benzer.</para>
	<para>İlk olarak Linux çekirdeğinin ve kullanıcı araçlarının kurulum ve yapılandırmalarından bahsedeceğim.  Daha sonra taşıma ve tünel modlarında elle yapılandırılan bağlantıların ayarlanmasını anlatacağım. Son olarak, önceden paylaşılmış anahtarlar ve X.509 sertifikalrı kullanan otomatik anahtarlamalı bağlantıların kurulmasının üzerinden geçeceğiz. Roadwarriors için destekle bu bölüm sonlanacak.</para>
	<sect2 id="ipsec-howto-kametools-installation"><title>Kurulum</title>
		<para>Kurulum için kullanacağınız Linux çekirdeği en azından 2.5.47 veya 2.6.* olmalıdır. Çekirdeğin kaynak kodlarını <ulink url="http://www.kernel.org"/> adresinden indirebilirsiniz. İndirdikten sonta açıp, yapılandırıp derlemeniz gerekecektir.<screen>cd /usr/local/src
tar xvjf /path-to-source/linux-&lt;version&gt;.tar.bz2
cd linux-&lt;version&gt;
make xconfig
make bzImage
make modules
make modules_install
make install</screen>
		</para>
		<para>Bunlar Linux çekirdeğinin yapılandırılıp derlenmesinde en sık kullanılan çekirdek parametreleridir. Eğer özel bir kuruluma ihtiyacınız varsa Çekirdek NASIL belgesinden yararlanabilirsiniz.</para>
		<para>Çekirdeği yapılandırırken aşağıdaki özellikleri aktif hale getirmek önemldir:<screen>Networking support (NET) [Y/n/?] y
*
* Networking options
*
PF_KEY sockets (NET_KEY) [Y/n/m/?] y
IP: AH transformation (INET_AH) [Y/n/m/?] y
IP: ESP transformation (INET_ESP) [Y/n/m/?] y
IP: IPsec user configuration interface (XFRM_USER) [Y/n/m/?] y

Cryptographic API (CRYPTO) [Y/n/?] y
HMAC support (CRYPTO_HMAC) [Y/n/?] y
Null algorithms (CRYPTO_NULL) [Y/n/m/?] y
MD5 digest algorithm (CRYPTO_MD5) [Y/n/m/?] y
SHA1 digest algorithm (CRYPTO_SHA1) [Y/n/m/?] y
DES and Triple DES EDE cipher algorithms (CRYPTO_DES) [Y/n/m/?] y
AES cipher algorithms (CRYPTO_AES) [Y/n/m/?] y</screen>
		</para>
		<para>Kullandığınız çekirdeğin sürümüne bağlı olarak IPv6 desteğini de açmanız gerekebilir.</para>
		<para>Çekirdek derlenip kuruduktan sonra kullanıcı araçlarının kurulumuna geçilebilir. Bu araçları <ulink url="http://ipsec-tools.sourceforge.net/"/> adresinden indirebilirsiniz. Paketi elle derlerken çekirdek başlıklarının (kernel headers) nerede olduğunu belirtmeniz gerekebilir. Çekirdek başlıklarının en azından 2.5.47 sürümüne ait olması gereklidir.<warning>Eğer çekirdek sürümünüz &gt;= 2.6.10 ise kullanacağınız ipsec-tools da &gt;= 0.5 olmak zorundadır, çünkü bu çekirdeğe daha eski ipsec-tools sürümlerindeki racoon için tanımlı olmayan yeni yönlendirme politikaları eklenmiştir. Bazı Linux dağıtımlarının eski çekirdekler kullansalar bile çokça yama yapıyor olabileceklerini hesaba katın. Bunun için çekirdeğinizdeki yönlendirme politikalarına bakmanız yeterli olacaktır.</warning>
		<screen>./configure --with-kernel-headers=/lib/modules/2.6.X/build/include
make
make install</screen></para>
		<para>Artık devam etmek için herşey hazır olmalıdır.</para>
	</sect2>
	<sect2 id="ipsec-howto-kametools-setkey"><title><command>setkey</command> kullanan elle anahtarlanmış bağlantılar</title>
		<para>Elle anahtarlanmış bağlantı derken bağlantının kurulumu için gerekli tüm parametrelerin bir yönetici tarafından atandığı bağlantıları kastediyorum. IKE protokolü tarafların kimlik kanıtlamasını otomatik olarak yapmaz ve gerekli parametreleri belirlemez. Güvenlik anlaşmasının tesisinde hangi protokolün, algoritmanın ve anahtarın kullanacağına ve uygun şekilde güvenlik anlaşması veritabanına (SAD) yazılacağına yönetici karar verir.</para>
		<sect3 id="ipsec-howto-kametools-setkey-transport"><title>Taşıma Modu</title>
		<para>Bu bölümde önce taşıma modunda nasıl elle anahtarlanmış bağlantının kurulacağını göreceğiz. Bu başlangıç için en iyi yöntemdir çünkü kurulabilecek en basit bağlantı budur. Örnek olarak 192.168.1.100 ve 192.168.2.100 adreslerine sahip iki bilgisayarın IPsec ile haberleştiğini varsayacağız.</para>
		<para>SAD ve SPD'de bulunan bütün parametreler <command>setkey</command> komutuyla değiştirilebilir. Bu komutun kılavuz belgesi oldukça açıklayıcı olduğundan burada sadece taşıma modunda bir bağlantı kurulması için ihtiyaç duyulan parametreler açıklanacaktır. <command>setkey</command> eğer <command>setkey -f /etc/setkey.conf</command> şeklinde kullanılırsa istediğiniz bir yapılandırma dosyasını kullanabilir. Uygun bir <filename>/etc/setkey.conf</filename> dosyası aşağıda verilmiştir.<screen>#!/usr/sbin/setkey -f

# Configuration for 192.168.1.100

# Flush the SAD and SPD
flush;
spdflush;

# Attention: Use this keys only for testing purposes!
# Generate your own keys!

# AH SAs using 128 bit long keys
add 192.168.1.100 192.168.2.100 ah 0x200 -A hmac-md5 
0xc0291ff014dccdd03874d9e8e4cdf3e6;
add 192.168.2.100 192.168.1.100 ah 0x300 -A hmac-md5 
0x96358c90783bbfa3d7b196ceabe0536b;

# ESP SAs using 192 bit long keys (168 + 24 parity)
add 192.168.1.100 192.168.2.100 esp 0x201 -E 3des-cbc 
0x7aeaca3f87d060a12f4a4487d5a5c3355920fae69a96c831;
add 192.168.2.100 192.168.1.100 esp 0x301 -E 3des-cbc 
0xf6ddb555acfd9d77b03ea3843f2653255afe8eb5573965df;

# Security policies
spdadd 192.168.1.100 192.168.2.100 any -P out ipsec
esp/transport//require
ah/transport//require;

spdadd 192.168.2.100 192.168.1.100 any -P in ipsec
esp/transport//require
ah/transport//require;</screen></para>
		<para>Elle anahtarlanan bağlantınızı test amacı dışında herhangi bir iş için kullanacaksanız yukarıdaki betikteki anahtarları değiştirmeniz gerekir. Kendi anahtarlarınızı aşağıdaki komutla yaratabilirsiniz:	
		<screen>$ # 128 Bit long key
$ dd if=/dev/random count=16 bs=1| xxd -ps
16+0 Records ein
16+0 Records aus
cd0456eff95c5529ea9e918043e19cbe

$ # 192 Bit long key
$ dd if=/dev/random count=24 bs=1| xxd -ps
24+0 Records ein
24+0 Records aus
9d6c4a8275ab12fbfdcaf01f0ba9dcfb5f424c878e97f888</screen></para>
	<para>Anahtarlarınızı yaratırken lütfen gerçekten rasgele anahtar ürettiğinden emin olabileceğiniz <filename>/dev/random</filename> aygıtını kullanın.</para>
	<para>Betik ilk olarak güvenlik anlaşması veritabanını (SAD) ve güvenlik politikası veritabanını (SPD) temizler. Daha sonra AH SA ve ESP SA'ları oluşturur. Bir güvenlik anlaşması SAD'a <command>add</command> komutu ile eklenir. Bu komut parametre olarak kaynak ve hedef IP adreslerine, IPsec protokolüne (<command>ah</command>), SPI (<command>0x200</command>) ve algoritma bilgilerine ihtiyaç duyar. Kimlik denetleme algoritması <command>-A</command> ile belirtilir (şifreleme için <command>-E</command>, sıkıştırma için <command>-C</command> kullanılır, henüz IP sıkıştırması desteklenmemektedir). Algoritma içinde anahtar mutlaka belirtilmelidir. Anahtar çift tırnak içinde “ASCII” veya <command>0x</command>'i takip eden heksadesimal biçimde yazılabilir.</para>
	<para>Linux AH ve ESP için şu algoritmaları destekler: hmac-md5 and hmac-sha, des-cbc ve 3des-cbc. Kısa bir zaman sonra şu algoritmalar da muhtemelen desteklenecektir: basit (şifrelemesiz), blowfish-cbc, aes-cbc, hmac-sha2-256 ve hmac-sha2-512.</para>
	<para>SPD'ye güvenlik politikaları <command>spdadd</command> komutu ile eklenir. Hangi paketlerin IPsec ile korunacağı ve hangi protokol ve anahtarların kullanılacağını bu politikalar belirler. Bu komut da parametre olarak korunacak paketlerin kaynak ve hedef IP adresine, korunacak (herhangi bir) protokole (ve porta) ve kullanılacak politikaya (<command>-P</command>) ihtiyaç duyar. Politika yönü (içeri/dışarı), uygulanacak işlemi (ipsec/discard/none), protokolü (ah/esp/ipcomp), modu (transport) ve seviyeyi (use/require) belirler.</para>
	<para>Bu yapılandırma dosyası IPsec iletişiminde yer alacak her iki tarafta da oluşturulmalıdır. Yukarıdaki dosya 192.168.1.100 adresli tarafta hiç bir değişikliğe ihtiyaç duymadan çalışırken 192.168.2.100 adresine sahip tarafta paketlerinin yönünün değiştiğini göstermek üzere hafifçe değiştirilmelidir. Bunun en kolay yolu güvenlik politikalarındaki yönleri değiştirmektir: <command>-P in</command> ile <command>-P out</command>'nin yerlerini değiştirmektir. Aşağıda örnek bir dosya var:<screen>#!/usr/sbin/setkey -f

# Configuration for 192.168.2.100

# Flush the SAD and SPD
flush;
spdflush;

# Attention: Use this keys only for testing purposes!
# Generate your own keys!

# AH SAs using 128 bit long keys
add 192.168.1.100 192.168.2.100 ah 0x200 -A hmac-md5 
0xc0291ff014dccdd03874d9e8e4cdf3e6;
add 192.168.2.100 192.168.1.100 ah 0x300 -A hmac-md5 
0x96358c90783bbfa3d7b196ceabe0536b;

# ESP SAs using 192 bit long keys (168 + 24 parity)
add 192.168.1.100 192.168.2.100 esp 0x201 -E 3des-cbc 
0x7aeaca3f87d060a12f4a4487d5a5c3355920fae69a96c831;
add 192.168.2.100 192.168.1.100 esp 0x301 -E 3des-cbc 
0xf6ddb555acfd9d77b03ea3843f2653255afe8eb5573965df;

# Security policies
spdadd 192.168.1.100 192.168.2.100 any -P in ipsec
esp/transport//require
ah/transport//require;

spdadd 192.168.2.100 192.168.1.100 any -P out ipsec
esp/transport//require
ah/transport//require;</screen></para>

<para>Yapılandırma dosyası taraflardaki yerini aldığında <command>setkey -f /etc/setkey.conf</command> komutuyla yüklenebilir. Yüklemenin başarılı olup olmadığı SAD ve SPD görüntülenerek test edilebilir:<screen># setkey -D
# setkey -DP</screen></para>
<para>Kurulum <xref linkend="ipsec-howto-transportt"/>'te gösterilmektedir.</para>
<para><figure id="ipsec-howto-transportt"><title>Taşıma modunda AH ve ESP kullanan iki bilgisayar</title>
		<mediaobject><imageobject>
				<imagedata fileref="ipsec/transport.png" format="PNG" align="center" scalefit="1"/>
			</imageobject></mediaobject></figure>
		</para>	
		<para>Taraflardan birinden diğerini pinglediğinizde trafik şifrelenecek ve tcpdump aşağıdaki paketleri gösterecektir:<screen>12:45:39.373005 192.168.1.100 > 192.168.2.100: AH(spi=0x00000200,seq=0x1): 
ESP(spi=0x00000201,seq=0x1) (DF)
12:45:39.448636 192.168.2.100 > 192.168.1.100: AH(spi=0x00000300,seq=0x1): 
ESP(spi=0x00000301,seq=0x1)
12:45:40.542430 192.168.1.100 > 192.168.2.100: AH(spi=0x00000200,seq=0x2): 
ESP(spi=0x00000201,seq=0x2) (DF)
12:45:40.569414 192.168.2.100 > 192.168.1.100: AH(spi=0x00000300,seq=0x2): 
ESP(spi=0x00000301,seq=0x2)</screen></para>
		</sect3>
		<sect3 id="ipsec-howto-kametools-setkey-tunnel"><title>Tünel Modu</title>
		<para>Tünel modu her iki taraf da ağ geçidi olarak çalıştığında ve iki ağ arasındaki trafiği koruduğunda kullanılır (<xref linkend="ipsec-howto-tunel"/>). Orjinal IP paketleri bir ağ geçidinden diğerine gönderilirken şifrelenir ve kapsüllenir. Karşı taraf ise paketin kapsülünü açar ve orjinal korumasız paketin geçişine izin verir.</para>
		<para><figure id="ipsec-howto-tunel"><title>İki ağ arasındaki trafiği koruyan iki bilgisayar</title>
					<mediaobject><imageobject>
							<imagedata fileref="ipsec/tunnel.png" format="PNG" align="center" scalefit="1"/>
					</imageobject></mediaobject></figure>
		</para>
		<para>Güvenlik anlaşmalarının ve politikaların yapılandırması taşıma moduna çok benzer. Aşağıda bir örneği bulunmaktadır:<screen>#!/usr/sbin/setkey -f

# Flush the SAD and SPD
flush;
spdflush;

# ESP SAs doing encryption using 192 bit long keys (168 + 24 parity)
# and authentication using 128 bit long keys
add 192.168.1.100 192.168.2.100 esp 0x201 -m tunnel -E 3des-cbc 
0x7aeaca3f87d060a12f4a4487d5a5c3355920fae69a96c831 
-A hmac-md5 0xc0291ff014dccdd03874d9e8e4cdf3e6;

add 192.168.2.100 192.168.1.100 esp 0x301 -m tunnel -E 3des-cbc 
0xf6ddb555acfd9d77b03ea3843f2653255afe8eb5573965df 
-A hmac-md5 0x96358c90783bbfa3d7b196ceabe0536b;

# Security policies
spdadd 172.16.1.0/24 172.16.2.0/24 any -P out ipsec
esp/tunnel/192.168.1.100-192.168.2.100/require;

spdadd 172.16.2.0/24 172.16.1.0/24 any -P in ipsec
esp/tunnel/192.168.2.100-192.168.1.100/require;</screen>
<warning>Kullandığınız Linux çekirdeği 2.6.10 veya daha üstü ise ve paketlerin bilgisayardan dışarı yönlendirilmesi gerekiyorsa ayrıca yönlendirme politikasını da belirtmeniz gerekir. Eğer ipsec-tools'un 0.5 sürümünü kullanırsanız bu politika otomatik olarak yüklenir aksi halde eski araçları kullanarak kendiniz eklemeniz gerekir. <command>setkey</command> komutunu Çekirdek modunda (<command>-k</command>) çalıştırıyprsanız yönlendirme politikasını da elle eklemeniz gerekir.</warning>
<screen>spdadd 172.16.2.0/24 172.16.1.0/24 any -P fwd ipsec
esp/tunnel/192.168.2.100-192.168.1.100/require;</screen>
	</para>
	<para>Bu örnekte sadece ESP protokolü kullanılmıştır. ESP protokolü bütünlüğü ve gizliliği garanti eder. Bu durumda ESP algoritmalarının sırası önemlidir. İlk olarak şifreleme algoritmasını ve anahtarını, ardından ise kimlik kanıtlama algoritmasını ve anahtarını tanımlamanız gereklidir.</para>
	<para>Tünelin iki tarafına da bu dosyayı kopyalamanız ve politikaların yönünü (<command>in</command> yerine <command>out</command>) değiştirmeniz gerekir. Yönlendirme politikanız da varsa IP adreslerinin yönlerini de ters çevirmeniz gerekir.</para>
	<para>BSD IPsec gerleştirimine benzemeyen bir şekilde Linux'daki bir güvenlik anlaşması tünel ve taşıma mıdlarından sadece biri için kullanılabilir. Taşıma modu öntanımlı mod olduğundan tünel moduna ihtiyaç duyulduğunda güvenlik anlaşması <command>-m tunnel</command> ile tanımlanmalıdır.</para>
	<para>Artık güvenlik politikaları korunacak ağların IP adreslerini göstermektedir. Bu adreslerini kaynak ve hedef olarak kullanacak paketler IPsec tarafından korunacaktır. Tünel modu kullanıldığında güvenlik politikası güvenliği gerçekleştirecek tarafların IP adreslerini ve tüneli belirtmelidir. Bu bilgileruygun IPsecSA'yı bulmak için gereklidir.</para>
	<para>Tüneliniz çalışmadığında yönlendirmenizi kontrol etmelisiniz. İstemcileriniz diğer ağa gönderecekleri paketleri vpn ağ geçidine göndermeleri gerektiğini bilmelidir. Bunun en kolay çözümü vpn ağ geçidini öntanımlı ağ geçidi yapmaktır.</para>
		</sect3>		
	</sect2>
	<sect2 id="ipsec-howto-kametools-racoon"><title>racoon kullanan otomatik anahtarlamalı bağlantılar</title>
	<para>KAME IKE altalan süre <command>racoon</command> Linux'a da uyarlanmıştır. Bu süreç otomatik anahtarlamalı IPsec bağlantıları kurabilmektedir. Racoon kimlik denetiminde önceden paylaşılan anahtarların, X.509 sertifikaların ve Kerberos'un kullanımını desteklemektedir. Temel, saldırgan ve asıl modlarda kullanılabilir. Bu bölümde <command>racoon</command> yapılandırması önceden paylaşılan anahtar ve X.509 sertifikasıyla nasıl yapıldığı gösterilecektir (Kerberos ile ilgili bölümü yazmayı planlıyorum). Bölüm sonunda bir roadwarrior yapılandırma senaryosu özet olarak verilecektir. <note><para>Eğer Linux 2.6.10 (ya da dağıtımınız tarafından yamalanmış 2.6.9 çekirdeği kullanıyorsanız ipsec-tools'un 0.5 sürümüne ihtiyacınız vardır.</para></note></para>
		<sect3 id="ipsec-howto-kametools-racoon-keys"><title>Önceden paylaşılmış anahtarlar</title>
			<para><command>racoon</command> kullanarak kimlik denetimi yapmanın en kolay yolu önceden paylaşılmış anahtarları kullanmaktır. Bu anahtarlar <filename>/etc/psk.txt</filename> dosyasında belirtilmelidir. Yetkisi olmayan kullanıcıların okuyamamaları gereken bu dosya (<command>chmod 400 /etc/psk.txt</command> aşağıdakine benzer olmalıdır:<screen># IPv4 Adresi
192.168.2.100          simple psk
5.0.0.1                0xe10bd52b0529b54aac97db63462850f3
# USER_FQDN
ralf@spenneberg.net    This is a psk for an email address
# FQDN
www.spenneberg.net     This is a psk</screen>
		</para>
		<para>Bu dosya sütunlar halinde organize edilmiştir. İlk sütun önceden paylaşılan anahtar (PSK) ile kimlik knaıtlaması yapılmış olan tarafın kimliğini barındırır. İkinci sütündaki herşey PSK'dır.</para>
		<para><command>racoon</command> yapılandırması dosyadan kolaylıkla anlaşılabilir. Aşağıdaki sıradan bir <command>racoon</command> yapılandırma dosyası <filename>/etc/racoon.conf</filename> bulacaksınız:<screen>path pre_shared_key "/etc/psk.txt";

remote 192.168.2.100 {
	exchange_mode main;
	proposal {
		encryption_algorithm 3des;
		hash_algorithm md5;
		authentication_method pre_shared_key;
		dh_group modp1024;
		}
}

sainfo address 172.16.1.0/24 any address 172.16.2.0/24 any {
	pfs_group modp768;
	encryption_algorithm 3des;
	authentication_algorithm hmac_md5;
	compression_algorithm deflate;
}</screen></para>
	<para>Bu dosyada ilk olarak 
		This configuration file first defines where racoon may find the preshared keys. It then defines a peer 192.168.2.100 and the parameters to use for the phase one of the IKE negotiation. The second paragraph specifies the parameters which may be used for the setup of the security associations. This definition may be specific for defined IP addresses or general using anonymous instead of the IP addresses. Here the encryption, authentication and compression algorithms to use for the SA are defined. All three need to be defined to avoid an error during the startup of racoon.</para>
	
	<para>The IKE daemon racoon does not start the tunnel negotiation immediately when started. Rather racoon waits until the tunnel is needed. For this notification to occur the kernel needs to know when to notify racoon. To achieve this, the administrator needs to define security policies without the appropiate security associations. Whenever the Linux kernel needs to protect a packet according to the security policies and when no security association is available, the Linux kernel calls racoon and asks for the required security associations. Racoon will then start the IKE negotiations and will create the SAs when finished. The Linux kernel can then send the packets.</para><para>For the assumed setup the following policies are needed on 192.168.1.100: <screen>#!/usr/sbin/setkey -f
#
# Flush SAD and SPD
flush;
spdflush;

# Create policies for racoon
spdadd 172.16.1.0/24 172.16.2.0/24 any -P out ipsec
esp/tunnel/192.168.1.100-192.168.2.100/require;

spdadd 172.16.2.0/24 172.16.1.0/24 any -P in ipsec
esp/tunnel/192.168.2.100-192.168.1.100/require;</screen></para>
	<para>Once the policies are loaded using setkey -f /etc/setkey.conf racoon may be started. For testing purposes racoon should be started using racoon -F -f /etc/racoon.conf. Again the configuration of the other peer has to be modified to reflect the different direction. The IP addresses in the files /etc/psk.txt, /etc/setkey.conf and /etc/racoon.conf must be exchanged.</para>
	<para>The initiation of the tunnel can then be followed in the logs:
		
		<screen>2003-02-21 18:11:17: INFO: main.c:170:main(): @(#)racoon 20001216 20001216
 sakane@kame.net
2003-02-21 18:11:17: INFO: main.c:171:main(): @(#)This product linked Open
SSL 0.9.6b [engine] 9 Jul 2001 (http://www.openssl.org/)
2003-02-21 18:11:17: INFO: isakmp.c:1365:isakmp_open(): 127.0.0.1[500] use
 d as isakmp port (fd=7)
2003-02-21 18:11:17: INFO: isakmp.c:1365:isakmp_open(): 192.168.1.100[500]
 used as isakmp port (fd=9)
2003-02-21 18:11:37: INFO: isakmp.c:1689:isakmp_post_acquire(): IPsec-SA r
equest for 192.168.2.100 queued due to no phase1 found.
2003-02-21 18:11:37: INFO: isakmp.c:794:isakmp_ph1begin_i(): initiate new 
phase 1 negotiation: 192.168.1.100[500]&lt;=&gt;192.168.2.100[500]
2003-02-21 18:11:37: INFO: isakmp.c:799:isakmp_ph1begin_i(): begin Identit
y Protection mode.
2003-02-21 18:11:37: INFO: vendorid.c:128:check_vendorid(): received Vendor
 ID: KAME/racoon
2003-02-21 18:11:37: INFO: vendorid.c:128:check_vendorid(): received Vendor
 ID: KAME/racoon
2003-02-21 18:11:38: INFO: isakmp.c:2417:log_ph1established(): ISAKMP-SA es
tablished 192.168.1.100[500]-192.168.2.100[500] spi:6a01ea039be7bac2:bd288f
f60eed54d0
2003-02-21 18:11:39: INFO: isakmp.c:938:isakmp_ph2begin_i(): initiate new p
hase 2 negotiation: 192.168.1.100[0]&lt;=&gt;192.168.2.100[0]
2003-02-21 18:11:39: INFO: pfkey.c:1106:pk_recvupdate(): IPsec-SA establish
ed: ESP/Tunnel 192.168.2.100->192.168.1.100 spi=68291959(0x4120d77)
2003-02-21 18:11:39: INFO: pfkey.c:1318:pk_recvadd(): IPsec-SA established:
 ESP/Tunnel 192.168.1.100->192.168.2.100 spi=223693870(0xd554c2e)</screen></para>
		</sect3>
		
		<sect3 id="ipsec-howto-kametools-racoon-x509"><title>X.509 Sertifikaları</title>
			<para>Racoon supports the usage of X.509 certificates for the authentication process. These certificates may be checked against a certificate authority (CA). The configuration is similar to the PSK configuration and differs only on the authentication part:<screen>path certificate "/etc/certs";

remote 192.168.2.100 {
	exchange_mode main;
	certificate_type x509 "my_certificate.pem" "my_private_key.pem";
	verify_cert on;
	my_identifier asn1dn;
	peers_identifier asn1dn;
	proposal {
		encryption_algorithm 3des;
		hash_algorithm md5;
		authentication_method rsasig;
		dh_group modp1024;
	}
}
					
sainfo address 172.16.1.0/24 any address 172.16.2.0/24 any {
	pfs_group modp768;
	encryption_algorithm 3des;
	authentication_algorithm hmac_md5;
	compression_algorithm deflate;
}</screen></para>
	<para>The certificate and the private key are stored in the certificate path /etc/certs. This path is set using the option path certificate in the configuration file. The certificates and the certificate revocation lists are stored in PEM format as generated with openssl. For the generation of certificates see the chapter on X.509 certificates. If the certificate of the peer is to be checked against a certificate authority (verify_cert on; is the default), then the certificate of the CA has to be also stored in this directory. For OpenSSL to find the certificate it has to be renamed or linked using the hashed name:
		<screen>ln -s CAfile.pem `openssl x509 -noout -hash &lt; CAfile.pem`.0</screen></para>
	<para>If the certificate additionally is to be checked against a certificate revocation file (CRL) the CRL must be stored in the same directory using a similar linked hashed name:
		<screen>ln -s CRLfile.pem `openssl x509 -noout -hash &lt; CAfile.pem`.r0</screen></para>
		<para>When storing the certificates and the private key it is important to note that racoon cannot decrypt a private key. Therefore the private key must be stored in its decrypted cleartext form. If you created a crypted private key, you have to decrypt it:
			
			<screen># openssl rsa -in my_private_key.pem -out my_private_key.pem
read RSA key
Enter PEM pass phrase: password
writing RSA key</screen>
		</para>
		</sect3>
		
		<sect3 id="ipsec-howto-kametools-racoon-roadwarrior"><title>Roadwarrior</title>
			<para>Roadwarriors are clients using unknown dynamic IP addresses to connect to a VPN gateway. In combination with racoon this poses two problems:<itemizedlist><listitem>
				
				The IP address is not known and cannot be specified in the racoon configuration file or in the /etc/psk.txt file. A different way to determine the identity of the client must be found. When using pre-shared keys this requires the aggressive mode! The best solution is the usage of X.509 certificates though.</listitem>
				<listitem>
				
      No security policy can be created for racoon to act on, since the destination IP address is not known. racoon must create the security policy and the security association when the connection is initiated.</listitem></itemizedlist>
</para>
<para>To achieve this the configuration file /etc/racoon.conf needs several modifications:
	
	<screen>path certificate "/etc/certs";
	
remote anonymous {
	exchange_mode main;
	generate_policy on;
	passive on;
	certificate_type x509 "my_certificate.pem" "my_private_key.pem";
	my_identifier asn1dn;
	peers_identifier asn1dn;
	proposal {
	encryption_algorithm 3des;
	hash_algorithm md5;
	authentication_method rsasig;
	dh_group modp1024;
	}
}
	
	
sainfo anonymous {
	pfs_group modp1024;
	encryption_algorithm 3des;
	authentication_algorithm hmac_md5;
	compression_algorithm deflate;
}</screen>
</para><para>The option generate_policy on instructs racoon to create the appropriate policy when a new connection is initiated. The option passive on tells racoon to remain passive and wait for new connection to be started from the outside. racoon may not start a connection.</para>
	
<para>The most important change though is the definition of anonymous in the remote and sainfo line. This instructs racoon to accept the connection from anywhere.</para>
		</sect3>
	</sect2>	
	
	<sect2 id="ipsec-howto-kametools-nattraversal"><title>Aykırı NAT</title>
		<para>The Linux kernel 2.6 is capable of using NAT traversal in tunnel mode. Transport mode is not supported yet. This can be used by Racoon starting with version 0.3.3 of the ipsec-tools.</para>
			
		<para>To configure Racoon for NAT traversal several options have been added to the configuration file. These are natt_keepalive, isakmp_natt, nat_traversal.</para>
			
		<para>The most important option is nat_traversal. This can be set to on, off or force. When set to on this peer will use NAT traversal as soon as a NAT device is detected on the path. Off will disable this behavior. When using force NAT traversal will be used regardless wether a NAT device is found or not.</para>
			
		<para>Since many NAT devices forget the entries in their internal tables quite fast when no traffic is seen, racoon offers to send keepalive packets across the wire. These are send every 20 seconds by default. You can change this value using natt_keepalive. Setting this to 0 seconds will disable this feature.</para>
			
		<para>If you want to use NAT traversal you have to specify the IP address and the port to use in the listen section of the racoon configuration file. This is done using isakmp_natt.</para>
		
		<para>For clarity a typical configuration file is shown, where the peer 192.168.2.100 is hidden by a NAT gateway with the IP address 192.168.1.1:
			
			<screen>path pre_shared_key "/etc/psk.txt";
			
timer  {
	natt_keepalive 10sec;
	}

listen {
	isakmp 192.168.1.100 [500];
	isakmp_natt 192.168.1.100 [4500];
}
			
remote 192.168.1.1 {
	exchange_mode main;
	nat_traversal on;
	proposal {
		encryption_algorithm 3des;
		hash_algorithm md5;
		authentication_method pre_shared_key;
		dh_group modp1024;
	}
}
			
sainfo address 172.16.1.0/24 any address 172.16.2.0/24 any {
	pfs_group modp768;
	encryption_algorithm 3des;
	authentication_algorithm hmac_md5;
	compression_algorithm deflate;
}</screen>
</para><para>If you configured everything correctly NAT will be detected automatically:
	
	<screen>2004-12-22 07:34:53: INFO: @(#)ipsec-tools 0.4 (http://ipsec-tools.sourceforge.net)
2004-12-22 07:34:53: INFO: @(#)This product linked OpenSSL 0.9.7a Feb 19 2003 (http://www.openssl.org/)
2004-12-22 07:34:53: INFO: 192.168.1.100[4500] used as isakmp port (fd=6)
2004-12-22 07:34:53: INFO: 192.168.1.100[4500] used for NAT-T
2004-12-22 07:34:53: INFO: 192.168.1.100[500] used as isakmp port (fd=7)
2004-12-22 07:35:09: INFO: respond new phase 1 negotiation: 192.168.1.100[500]&lt;-&gt;192.168.1.1[500]
2004-12-22 07:35:09: INFO: begin Identity Protection mode.
2004-12-22 07:35:09: INFO: received Vendor ID: draft-ietf-ipsec-nat-t-ike-02
2004-12-22 07:35:09: INFO: received Vendor ID: RFC XXXX
2004-12-22 07:35:09: INFO: Selected NAT-T version: RFC XXXX
2004-12-22 07:35:09: INFO: Hashing 192.168.1.100[500] with algo #1 
2004-12-22 07:35:09: INFO: NAT-D payload #0 verified
2004-12-22 07:35:09: INFO: Hashing 192.168.1.1[500] with algo #1 
2004-12-22 07:35:09: INFO: NAT-D payload #1 doesn't match
2004-12-22 07:35:09: INFO: NAT detected: PEER
2004-12-22 07:35:10: INFO: Hashing 192.168.1.1[500] with algo #1 
2004-12-22 07:35:10: INFO: Hashing 192.168.1.100[500] with algo #1 
2004-12-22 07:35:10: INFO: Adding remote and local NAT-D payloads.
2004-12-22 07:35:10: INFO: NAT-T: ports changed to: 192.168.1.1[4500]&lt;-&gt;192.168.1.100[4500]
2004-12-22 07:35:10: INFO: KA list add: 192.168.1.100[4500]->192.168.1.1[4500]
2004-12-22 07:35:10: INFO: ISAKMP-SA established 192.168.1.100[4500]-192.168.1.1[4500] spi:0613dc09c4ccc828:9cc9dfc9acc82eb5
2004-12-22 07:35:11: INFO: respond new phase 2 negotiation: 192.168.1.100[0]&lt;-&gt;192.168.1.1[0]
2004-12-22 07:35:11: INFO: Adjusting my encmode UDP-Tunnel->Tunnel
2004-12-22 07:35:11: INFO: Adjusting peer's encmode UDP-Tunnel(3)->Tunnel(1)
2004-12-22 07:35:11: INFO: IPsec-SA established: ESP/Tunnel 192.168.1.1->192.168.1.100 spi=95762109(0x5b536bd)
2004-12-22 07:35:11: INFO: IPsec-SA established: ESP/Tunnel 192.168.1.100->192.168.1.1 spi=222871470(0xd48bfae)</screen>
			</para>
			<para>When looking at the packets on the wire you will see UDP traffic traversing back and forth:
				
<screen>[root@bibo root]# tcpdump
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on tap1, link-type EN10MB (Ethernet), capture size 96 bytes
13:37:41.920621 IP 192.168.1.1.isakmp > 192.168.1.100.isakmp: isakmp: phase 1 I ident
13:37:41.941296 IP 192.168.1.100.isakmp > 192.168.1.1.isakmp: isakmp: phase 1 R ident
13:37:42.051826 IP 192.168.1.1.isakmp > 192.168.1.100.isakmp: isakmp: phase 1 I ident
13:37:42.157134 IP 192.168.1.100.isakmp > 192.168.1.1.isakmp: isakmp: phase 1 R ident
13:37:42.353942 IP 192.168.1.1.4500 > 192.168.1.100.4500: UDP, length 72
13:37:42.361530 IP 192.168.1.100.4500 > 192.168.1.1.4500: UDP, length 72
13:37:42.373799 IP 192.168.1.1.4500 > 192.168.1.100.4500: UDP, length 88
13:37:43.374630 IP 192.168.1.100.4500 > 192.168.1.1.4500: UDP, length 1
13:37:43.384476 IP 192.168.1.1.4500 > 192.168.1.100.4500: UDP, length 256
13:37:43.431219 IP 192.168.1.100.4500 > 192.168.1.1.4500: UDP, length 256
13:37:43.436680 IP 192.168.1.1.4500 > 192.168.1.100.4500: UDP, length 56
13:37:44.492976 IP 192.168.1.1.4500 > 192.168.1.100.4500: UDP, length 1
13:37:45.390137 IP 192.168.1.1.4500 > 192.168.1.100.4500: UDP, length 116
13:37:45.390612 IP 192.168.1.100.4500 > 192.168.1.1.4500: UDP, length 116
13:37:46.395603 IP 192.168.1.1.4500 > 192.168.1.100.4500: UDP, length 116
13:37:46.396009 IP 192.168.1.100.4500 > 192.168.1.1.4500: UDP, length 116</screen>
			</para>
			<para>If you are using your Racoon not in a roadwarrior setup but with fixed addresses as above you need to modify your Security Policies too. These need to reflect the natted addresses! The correct Policies for the above scenario are:
				
<screen>#!/usr/sbin/setkey -f
#
# Flush SAD and SPD
flush;
spdflush;

# Create policies for racoon
spdadd 172.16.1.0/24 172.16.2.0/24 any -P out ipsec
esp/tunnel/192.168.1.100-192.168.1.1/require;

spdadd 172.16.2.0/24 172.16.1.0/24 any -P in ipsec
esp/tunnel/192.168.1.1-192.168.1.100/require;</screen></para>
				
				
<para>These policies are automatically setup if you use generate_policy on; in your Racoon configuration.</para>
	</sect2>	
</sect1>

<sect1 id="ipsec-howto-isakmpd"><title>OpenBSD'nin isakmpd aracını kullanılan Linux 2.6 Çekirdeği</title>
	<para></para>
	<sect2 id="ipsec-howto-isakmpd-installation"><title>Kurulum</title>
		<para></para>
	</sect2>
	<sect2 id="ipsec-howto-isakmpd-psk"><title>Using preshared keys (PSK)</title>
		<para></para>
	</sect2>
	<sect2 id="ipsec-howto-isakmpd-x509"><title>Using X.509 certificates</title>
		<para></para>
	</sect2>

</sect1>

<sect1 id="ipsec-howto-x509"><title>X.509 Sertifikaları Oluşturmak</title>
	<para></para>
	<sect2 id="ipsec-howto-x509-openssl"><title>OpenSSL Kullanarak</title>
		<para></para>
	</sect2>
	<sect2 id="ipsec-howto-x509-windows"><title>Windows İstemcileri için Sertifika Oluşturmak</title>
		<para></para>
	</sect2>
</sect1>

<sect1 id="ipsec-howto-advanced"><title>Gelişmiş Yapılandırma</title>
	<sect2 id="ipsec-howto-advanced-xauth"><title>Xauth and IKE-Mode-Config</title>
		<para></para>
	</sect2>
	<sect2 id="ipsec-howto-advanced-iptables"><title>IPtables Kuralları</title>
		<para></para>
	</sect2>
</sect1>

<sect1 id="ipsec-howto-links"><title>Bağlantılar</title>
	<para>Bu bölümde ihtiyaç duyabileceğiniz bazı araçların bağlantılarını bulacaksınız:</para>
	<para><itemizedlist>
			<listitem>IPsec-Tools: <ulink url="http://ipsec-tools.sf.net/"/></listitem>
			<listitem>Markus Mueller'in yazdığı Windows makineleri VPN'e bağlamakta kullanılan <command>ipsec.exe</command>: <ulink url="http://vpn.ebootis.de/"/></listitem>
			<listitem>PKCS#12-Sertifika dosyalarını oluşturmaya yardımcı olan <command>wincert</command>: <ulink url="http://sourceforge.net/projects/wincert/"/></listitem>
		</itemizedlist>
	</para>
</sect1>

</article>
